{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import 'dotenv/config'\nimport * as fs from 'fs'\nimport path from 'path'\nimport yaml from 'yaml'\nimport { AthenaConnector } from '@latitude-data/athena-connector'\nimport { BigQueryConnector } from '@latitude-data/bigquery-connector'\nimport { DatabricksConnector } from '@latitude-data/databricks-connector'\nimport { DuckdbConnector } from '@latitude-data/duckdb-connector'\nimport { MssqlConnector } from '@latitude-data/mssql-connector'\nimport { MysqlConnector } from '@latitude-data/mysql-connector'\nimport { PostgresConnector } from '@latitude-data/postgresql-connector'\nimport { SnowflakeConnector } from '@latitude-data/snowflake-connector'\nimport { SqliteConnector } from '@latitude-data/sqlite-connector'\nimport { TrinoConnector } from '@latitude-data/trino-connector'\n\nimport { type BaseConnector } from '@latitude-data/base-connector'\n\nexport enum ConnectorType {\n  Athena = 'athena',\n  Clickhouse = 'clickhouse',\n  Duckdb = 'duckdb',\n  Postgres = 'postgres',\n  Bigquery = 'bigquery',\n  Mysql = 'mysql',\n  Redshift = 'redshift',\n  Snowflake = 'snowflake',\n  Trino = 'trino',\n  Sqlite = 'sqlite',\n  Mssql = 'mssql',\n  Databricks = 'databricks',\n}\n\nexport function createConnector(sourcePath: string): BaseConnector {\n  if (!fs.existsSync(sourcePath)) {\n    throw new Error(`Missing source configuration file in: ${sourcePath}`)\n  }\n\n  const file = fs.readFileSync(sourcePath, 'utf8')\n  const config = yaml.parse(file, (_, value) => {\n    // if key starts with 'LATITUDE__', replace it with the environment variable\n    if (typeof value === 'string' && value.startsWith('LATITUDE__')) {\n      if (process.env[value]) return process.env[value]\n\n      throw new Error(`\n      Invalid configuration. Environment variable ${value} was not found in the environment. You can review how to set up secret source credentials in the documentation: https://docs.latitude.so/sources/credentials\n      `)\n    } else {\n      return value\n    }\n  })\n\n  if (!config?.type) throw new Error(`Missing 'type' in configuration`)\n  if (typeof config.type !== 'string')\n    throw new Error(`Invalid 'type' in configuration`)\n\n  const type = config.type\n  const details = config.details || {}\n\n  if (!Object.values(ConnectorType).includes(type)) {\n    throw new Error(`Unsupported connector type: ${config.type}`)\n  }\n\n  switch (type) {\n    case ConnectorType.Postgres:\n    case ConnectorType.Redshift:\n    case ConnectorType.Clickhouse:\n      return new PostgresConnector(path.dirname(sourcePath), details)\n    case ConnectorType.Bigquery:\n      return new BigQueryConnector(path.dirname(sourcePath), details)\n    case ConnectorType.Mysql:\n      return new MysqlConnector(path.dirname(sourcePath), details)\n    case ConnectorType.Snowflake:\n      return new SnowflakeConnector(path.dirname(sourcePath), details)\n    case ConnectorType.Athena:\n      return new AthenaConnector(path.dirname(sourcePath), details)\n    case ConnectorType.Trino:\n      return new TrinoConnector(path.dirname(sourcePath), details)\n    case ConnectorType.Duckdb:\n      return new DuckdbConnector(path.dirname(sourcePath), details)\n    case ConnectorType.Sqlite:\n      return new SqliteConnector(path.dirname(sourcePath), details)\n    case ConnectorType.Mssql:\n      return new MssqlConnector(path.dirname(sourcePath), details)\n    case ConnectorType.Databricks:\n      return new DatabricksConnector(path.dirname(sourcePath), details)\n  }\n\n  throw new Error()\n}\n"],"names":[],"mappings":"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"}