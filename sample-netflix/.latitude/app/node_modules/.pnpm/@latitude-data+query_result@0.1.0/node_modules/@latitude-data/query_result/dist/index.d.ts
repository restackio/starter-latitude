export declare enum DataType {
    Boolean = "boolean",
    Datetime = "datetime",
    Float = "float",
    Integer = "integer",
    Null = "null",
    String = "string",
    Unknown = "unknown"
}
export type Field = {
    name: string;
    type: DataType;
};
type Props = {
    fields?: Field[];
    rows?: unknown[][];
    rowCount?: number;
};
export type QueryResultPayload = {
    fields: Field[];
    rows: unknown[][];
    rowCount: number;
};
export type QueryResultRow = {
    [key: string]: unknown;
};
export type QueryResultArray = {
    [key: string]: unknown;
}[];
export default class QueryResult {
    fields: Field[];
    rowCount: number;
    rows: unknown[][];
    static fromJSON(json: string): QueryResult;
    constructor({ fields, rowCount, rows }: Props);
    serialize(): {
        fields: Field[];
        rowCount: number;
        rows: unknown[][];
    };
    toJSON(): string;
    toArray(): QueryResultRow[];
}
export {};
//# sourceMappingURL=index.d.ts.map