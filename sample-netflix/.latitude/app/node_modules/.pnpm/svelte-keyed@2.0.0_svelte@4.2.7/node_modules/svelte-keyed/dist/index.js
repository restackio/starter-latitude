import { derived } from 'svelte/store';
export const getTokens = (key) => {
    let keyWithoutBracket = key.replace(/\[(\d+)\]/g, '.$1');
    if (keyWithoutBracket.startsWith('.')) {
        keyWithoutBracket = keyWithoutBracket.slice(1);
    }
    return keyWithoutBracket.split('.');
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const getNested = (root, keyTokens) => {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    let current = root;
    for (const key of keyTokens) {
        if (current == null) {
            return undefined;
        }
        current = current[key];
    }
    return current;
};
const clonedWithPrototype = (source) => {
    const clone = Object.create(source);
    Object.assign(clone, source);
    return clone;
};
export function keyed(parent, path) {
    const keyTokens = getTokens(path);
    if (keyTokens.some((token) => token === '__proto__')) {
        throw new Error('key cannot include "__proto__"');
    }
    const branchTokens = keyTokens.slice(0, keyTokens.length - 1);
    const leafToken = keyTokens[keyTokens.length - 1];
    const keyedValue = derived(parent, ($parent) => getNested($parent, keyTokens));
    const set = (value) => {
        parent.update(($parent) => {
            if ($parent == null) {
                return $parent;
            }
            const newParent = Array.isArray($parent) ? [...$parent] : clonedWithPrototype($parent);
            getNested(newParent, branchTokens)[leafToken] = value;
            return newParent;
        });
    };
    const update = (fn) => {
        parent.update(($parent) => {
            if ($parent == null) {
                return $parent;
            }
            const newValue = fn(getNested($parent, keyTokens));
            const newParent = Array.isArray($parent) ? [...$parent] : clonedWithPrototype($parent);
            getNested(newParent, branchTokens)[leafToken] = newValue;
            return newParent;
        });
    };
    return {
        subscribe: keyedValue.subscribe,
        set,
        update,
    };
}
