import { startOfToday, startOfTomorrow, startOfYesterday, addWeeks, addMonths, startOfWeek, startOfMonth, startOfQuarter, startOfYear, addDays, parse as parse$1, format as format$1 } from 'date-fns';

var RelativeDate;
(function (RelativeDate) {
    RelativeDate["Now"] = "_NOW_";
    RelativeDate["Today"] = "_TODAY_";
    RelativeDate["Tomorrow"] = "_TOMORROW_";
    RelativeDate["Yesterday"] = "_YESTERDAY_";
    RelativeDate["OneWeekAgo"] = "_ONE_WEEK_AGO_";
    RelativeDate["TwoWeeksAgo"] = "_TWO_WEEKS_AGO_";
    RelativeDate["OneWeekFromNow"] = "_ONE_WEEK_FROM_NOW_";
    RelativeDate["OneMonthAgo"] = "_ONE_MONTH_AGO_";
    RelativeDate["OneMonthFromNow"] = "_ONE_MONTH_FROM_NOW_";
    RelativeDate["OneYearAgo"] = "_ONE_YEAR_AGO_";
    RelativeDate["StartOfThisWeek"] = "_START_OF_THIS_WEEK_";
    RelativeDate["StartOfNextWeek"] = "_START_OF_NEXT_WEEK_";
    RelativeDate["StartOfLastWeek"] = "_START_OF_LAST_WEEK_";
    RelativeDate["StartOfThisMonth"] = "_START_OF_THIS_MONTH_";
    RelativeDate["StartOfNextMonth"] = "_START_OF_NEXT_MONTH_";
    RelativeDate["StartOfLastMonth"] = "_START_OF_LAST_MONTH_";
    RelativeDate["StartOfThisQuarter"] = "_START_OF_THIS_QUARTER_";
    RelativeDate["StartOfNextQuarter"] = "_START_OF_NEXT_QUARTER_";
    RelativeDate["StartOfLastQuarter"] = "_START_OF_LAST_QUARTER_";
    RelativeDate["StartOfThisYear"] = "_START_OF_THIS_YEAR_";
    RelativeDate["StartOfNextYear"] = "_START_OF_NEXT_YEAR_";
    RelativeDate["StartOfLastYear"] = "_START_OF_LAST_YEAR_";
    RelativeDate["ThreeDaysAgo"] = "_THREE_DAYS_AGO_";
    RelativeDate["ThirtyDaysAgo"] = "_THIRTY_DAYS_AGO_";
    RelativeDate["NinetyDaysAgo"] = "_NINETY_DAYS_AGO_";
    RelativeDate["SixMonthsAgo"] = "_SIX_MONTHS_AGO_";
})(RelativeDate || (RelativeDate = {}));
const RELATIVE_DATE_RESOLVE_FNS = {
    [RelativeDate.Now]: () => new Date(),
    [RelativeDate.Today]: () => startOfToday(),
    [RelativeDate.Tomorrow]: () => startOfTomorrow(),
    [RelativeDate.Yesterday]: () => startOfYesterday(),
    [RelativeDate.OneWeekAgo]: () => addWeeks(startOfToday(), -1),
    [RelativeDate.TwoWeeksAgo]: () => addWeeks(startOfToday(), -2),
    [RelativeDate.OneWeekFromNow]: () => addWeeks(startOfToday(), 1),
    [RelativeDate.OneMonthAgo]: () => addMonths(startOfToday(), -1),
    [RelativeDate.OneMonthFromNow]: () => addMonths(startOfToday(), 1),
    [RelativeDate.StartOfThisWeek]: () => startOfWeek(startOfToday()),
    [RelativeDate.StartOfNextWeek]: () => startOfWeek(addWeeks(startOfToday(), 1)),
    [RelativeDate.StartOfLastWeek]: () => startOfWeek(addWeeks(startOfToday(), -1)),
    [RelativeDate.StartOfThisMonth]: () => startOfMonth(startOfToday()),
    [RelativeDate.StartOfNextMonth]: () => startOfMonth(addMonths(startOfToday(), 1)),
    [RelativeDate.StartOfLastMonth]: () => startOfMonth(addMonths(startOfToday(), -1)),
    [RelativeDate.StartOfThisQuarter]: () => startOfQuarter(startOfToday()),
    [RelativeDate.StartOfNextQuarter]: () => startOfQuarter(addMonths(startOfToday(), 3)),
    [RelativeDate.StartOfLastQuarter]: () => startOfQuarter(addMonths(startOfToday(), -3)),
    [RelativeDate.StartOfThisYear]: () => startOfYear(startOfToday()),
    [RelativeDate.StartOfNextYear]: () => startOfYear(addMonths(startOfToday(), 12)),
    [RelativeDate.StartOfLastYear]: () => startOfYear(addMonths(startOfToday(), -12)),
    [RelativeDate.ThreeDaysAgo]: () => addDays(startOfToday(), -3),
    [RelativeDate.ThirtyDaysAgo]: () => addDays(startOfToday(), -30),
    [RelativeDate.NinetyDaysAgo]: () => addDays(startOfToday(), -90),
    [RelativeDate.SixMonthsAgo]: () => addMonths(startOfToday(), -6),
    [RelativeDate.OneYearAgo]: () => addMonths(startOfToday(), -12),
};
const DEFAULT_DATE_FORMAT = 'yyyy-MM-dd';
class RichDate {
    value;
    format;
    constructor(value = new Date(), format = DEFAULT_DATE_FORMAT) {
        this.value = value;
        this.format = format;
    }
    static fromString(formattedValue, format = DEFAULT_DATE_FORMAT) {
        if (Object.values(RelativeDate).includes(formattedValue)) {
            return new RichDate(formattedValue, format);
        }
        const date = parse$1(formattedValue, format, new Date());
        return new RichDate(date, format);
    }
    isRelative() {
        return Object.values(RelativeDate).includes(this.value);
    }
    toString() {
        if (this.value instanceof Date)
            return format$1(this.value, this.format);
        return this.value;
    }
    resolve() {
        if (this.value instanceof Date)
            return this.value;
        return RELATIVE_DATE_RESOLVE_FNS[this.value]?.() || new Date();
    }
}
const RELATIVE_DATES = {
    Today: RelativeDate.Today,
    Tomorrow: RelativeDate.Tomorrow,
    Yesterday: RelativeDate.Yesterday,
    'One week ago': RelativeDate.OneWeekAgo,
    'One week from now': RelativeDate.OneWeekFromNow,
    'One month ago': RelativeDate.OneMonthAgo,
    'One month from now': RelativeDate.OneMonthFromNow,
};
const RELATIVE_RANGES = {
    'Current week': {
        start: RelativeDate.StartOfThisWeek,
        end: RelativeDate.StartOfNextWeek,
    },
    'Current month': {
        start: RelativeDate.StartOfThisMonth,
        end: RelativeDate.StartOfNextMonth,
    },
    'Current quarter': {
        start: RelativeDate.StartOfThisQuarter,
        end: RelativeDate.StartOfNextQuarter,
    },
    'Current year': {
        start: RelativeDate.StartOfThisYear,
        end: RelativeDate.StartOfNextYear,
    },
    'Last week': {
        start: RelativeDate.StartOfLastWeek,
        end: RelativeDate.StartOfThisWeek,
    },
    'Last month': {
        start: RelativeDate.StartOfLastMonth,
        end: RelativeDate.StartOfThisMonth,
    },
    'Last quarter': {
        start: RelativeDate.StartOfLastQuarter,
        end: RelativeDate.StartOfThisQuarter,
    },
    'Last year': {
        start: RelativeDate.StartOfLastYear,
        end: RelativeDate.StartOfThisYear,
    },
    'Last 3 days': {
        start: RelativeDate.ThreeDaysAgo,
        end: RelativeDate.Today,
    },
    'Last 7 days': {
        start: RelativeDate.OneWeekAgo,
        end: RelativeDate.Today,
    },
    'Last 14 days': {
        start: RelativeDate.TwoWeeksAgo,
        end: RelativeDate.Today,
    },
    'Last 30 days': {
        start: RelativeDate.ThirtyDaysAgo,
        end: RelativeDate.Today,
    },
    'Last 60 days': {
        start: RelativeDate.ThirtyDaysAgo,
        end: RelativeDate.Today,
    },
    'Last 90 days': {
        start: RelativeDate.NinetyDaysAgo,
        end: RelativeDate.Today,
    },
    'Last 6 months': {
        start: RelativeDate.SixMonthsAgo,
        end: RelativeDate.Today,
    },
    'Last 12 months': {
        start: RelativeDate.OneYearAgo,
        end: RelativeDate.Today,
    },
};

var ValueType;
(function (ValueType) {
    ValueType["NULL"] = "null";
    ValueType["TEXT"] = "text";
    ValueType["NUM"] = "num";
    ValueType["BOOL"] = "bool";
    ValueType["DATE"] = "date";
})(ValueType || (ValueType = {}));
function format(value) {
    if (value instanceof Date)
        value = new RichDate(value);
    if (value === null) {
        return `$${ValueType.NULL}`;
    }
    if (typeof value === 'string') {
        return `$${ValueType.TEXT}:${encodeURIComponent(value)}`;
    }
    if (typeof value === 'number') {
        return `$${ValueType.NUM}:${value}`;
    }
    if (typeof value === 'boolean') {
        return `$${ValueType.BOOL}:${value ? 'true' : 'false'}`;
    }
    if (value instanceof RichDate) {
        const suffix = value.format === DEFAULT_DATE_FORMAT
            ? ''
            : `:${encodeURIComponent(value.format)}`;
        return `$${ValueType.DATE}:${encodeURIComponent(value.toString())}${suffix}`;
    }
    return encodeURIComponent(String(value));
}
function parse(value) {
    if (!value.startsWith('$'))
        return decodeURIComponent(value);
    const [type, ...rest] = value.slice(1).split(':');
    if (!Object.values(ValueType).includes(type))
        return decodeURIComponent(value);
    if (type === ValueType.NULL)
        return null;
    if (rest.length === 0)
        return value; // Value not specified
    if (type === ValueType.TEXT)
        return decodeURIComponent(rest.join(':'));
    if (type === ValueType.NUM)
        return Number(rest.join(':'));
    if (type === ValueType.BOOL)
        return rest.join(':') === 'true';
    if (type === ValueType.DATE) {
        const date = decodeURIComponent(rest[0]);
        const format = rest.length > 1 ? decodeURIComponent(rest[1]) : DEFAULT_DATE_FORMAT;
        return RichDate.fromString(date, format);
    }
    return decodeURIComponent(value); // Unhandled type
}

export { DEFAULT_DATE_FORMAT, RELATIVE_DATES, RELATIVE_RANGES, RelativeDate, RichDate, format, parse };
