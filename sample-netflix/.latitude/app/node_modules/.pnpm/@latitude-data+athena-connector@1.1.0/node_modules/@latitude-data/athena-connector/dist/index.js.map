{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import {\n  AthenaClient,\n  ColumnInfo,\n  GetQueryExecutionCommand,\n  GetQueryResultsCommand,\n  Row,\n  StartQueryExecutionCommand,\n} from '@aws-sdk/client-athena'\nimport {\n  BaseConnector,\n  CompiledQuery,\n  ConnectorError,\n  ResolvedParam,\n} from '@latitude-data/base-connector'\nimport QueryResult, { DataType, Field } from '@latitude-data/query_result'\n\ninterface AthenaQueryClientConfig {\n  client: {\n    region?: string\n    credentials?: {\n      accessKeyId: string\n      secretAccessKey: string\n    }\n  }\n  database: string\n  catalog: string\n  workgroup: string\n  resultReuseConfiguration?: {\n    ResultReuseByAgeConfiguration: {\n      Enabled: boolean\n      MaxAgeInMinutes?: number\n    }\n  }\n}\n\nexport type ConnectionParams = AthenaQueryClientConfig\n\nexport class AthenaConnector extends BaseConnector {\n  private client: AthenaClient\n  private database: string = 'default'\n  private catalog: string = 'AwsDataCatalog'\n  private workgroup: string = 'primary'\n  private resultReuseConfiguration = {\n    ResultReuseByAgeConfiguration: {\n      Enabled: false,\n    },\n  }\n\n  constructor(rootPath: string, connectionParams: ConnectionParams) {\n    super(rootPath)\n\n    this.client = new AthenaClient(connectionParams.client)\n    this.database = connectionParams.database || this.database\n    this.catalog = connectionParams.catalog || this.catalog\n    this.workgroup = connectionParams.workgroup || this.workgroup\n    this.resultReuseConfiguration =\n      connectionParams.resultReuseConfiguration || this.resultReuseConfiguration\n  }\n\n  resolve(value: unknown, _: number): ResolvedParam {\n    return {\n      value,\n      resolvedAs: '?',\n    }\n  }\n\n  async runQuery(query: CompiledQuery): Promise<QueryResult> {\n    const queryExecutionInput = {\n      QueryString: query.sql,\n      ExecutionParameters: this.buildQueryParams(query.params),\n      QueryExecutionContext: {\n        Database: this.database,\n        Catalog: this.catalog,\n      },\n      WorkGroup: this.workgroup,\n      ResultReuseConfiguration: this.resultReuseConfiguration,\n    }\n\n    try {\n      const { QueryExecutionId } = await this.client.send(\n        new StartQueryExecutionCommand(queryExecutionInput),\n      )\n\n      const response = await this.checkQueryExequtionStateAndGetData(\n        QueryExecutionId as string,\n      )\n\n      return response\n    } catch (error) {\n      throw new ConnectorError(`Query execution failed: ${error}`)\n    }\n  }\n\n  private buildQueryParams(params: ResolvedParam[]) {\n    const payload = params.map((param) => String(param.value))\n\n    if (payload.length === 0) {\n      return undefined\n    } else {\n      return payload\n    }\n  }\n\n  private async checkQueryExequtionStateAndGetData(\n    QueryExecutionId: string,\n  ): Promise<QueryResult> {\n    const command = new GetQueryExecutionCommand({ QueryExecutionId })\n    try {\n      const response = await this.client.send(command)\n      const state = response?.QueryExecution?.Status?.State\n\n      if (state === 'SUCCEEDED') {\n        const { ResultSet } = await this.client.send(\n          new GetQueryResultsCommand({ QueryExecutionId }),\n        )\n\n        const rowCount = ResultSet?.Rows?.length\n        const rows = ResultSet?.Rows?.slice(1, -1).map(\n          (row: Row) => row?.Data?.map((value) => value.VarCharValue) || [],\n        )\n        const fields = ResultSet?.ResultSetMetadata?.ColumnInfo?.map(\n          (column: ColumnInfo) =>\n            ({\n              name: column.Name,\n              type: this.convertDataType(column.Type),\n            }) as Field,\n        )\n\n        return new QueryResult({ fields, rows, rowCount })\n      } else if (state === 'FAILED') {\n        throw new ConnectorError(\n          `Query execution failed: ${response?.QueryExecution?.Status?.StateChangeReason}`,\n        )\n      } else {\n        // We wait for 1 second before checking the query execution state again...\n        await new Promise((resolve) => setTimeout(resolve, 1000))\n\n        return this.checkQueryExequtionStateAndGetData(QueryExecutionId)\n      }\n    } catch (error) {\n      throw new ConnectorError(`Query execution failed: ${error}`)\n    }\n  }\n\n  private convertDataType(\n    dataTypeID: string | undefined,\n    fallbackDataType = DataType.Unknown,\n  ): DataType {\n    switch (dataTypeID) {\n      case 'tinyint':\n      case 'smallint':\n      case 'int':\n      case 'integer':\n      case 'bigint':\n        return DataType.Integer\n      case 'real':\n      case 'float':\n      case 'double':\n      case 'decimal':\n      case 'numeric':\n      case 'number':\n        return DataType.Float\n      case 'date':\n      case 'timestamp':\n        return DataType.Datetime\n      case 'char':\n      case 'varchar':\n      case 'string':\n        return DataType.String\n      case 'boolean':\n        return DataType.Boolean\n      case 'binary':\n      case 'varbinary':\n      case 'ipaddress':\n      case 'array':\n      case 'map':\n      case 'row':\n      case 'struct':\n      case 'udt':\n      case 'uuid':\n      default:\n        return fallbackDataType\n    }\n  }\n}\n"],"names":[],"mappings":"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"}