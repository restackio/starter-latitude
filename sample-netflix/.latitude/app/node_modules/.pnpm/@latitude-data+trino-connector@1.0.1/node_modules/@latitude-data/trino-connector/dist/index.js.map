{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import {\n  BaseConnector,\n  QueryError,\n  CompiledQuery,\n  ResolvedParam,\n} from '@latitude-data/base-connector'\nimport QueryResult, { DataType, Field } from '@latitude-data/query_result'\nimport { Trino, BasicAuth } from 'trino-client'\n\nexport type ConnectionParams = {\n  server: string\n  catalog?: string\n  schema?: string\n  username: string\n  password?: string\n}\n\nexport class TrinoConnector extends BaseConnector {\n  private client: Trino\n\n  constructor(rootPath: string, connectionParams: ConnectionParams) {\n    super(rootPath)\n    this.client = Trino.create({\n      server: connectionParams.server,\n      catalog: connectionParams.catalog,\n      schema: connectionParams.schema,\n      auth: new BasicAuth(connectionParams.username, connectionParams.password),\n    })\n  }\n\n  resolve(value: unknown, _: number): ResolvedParam {\n    return {\n      value,\n      resolvedAs: '?',\n    }\n  }\n\n  async runQuery(request: CompiledQuery): Promise<QueryResult> {\n    let query = request.sql\n    if (request.params.length) {\n      const preparedQuery = `PREPARE request_query FROM (${request.sql})`\n      const prepareIter = await this.client.query(preparedQuery)\n      for await (const data of prepareIter) {\n        if (data.error) {\n          throw new QueryError(data.error.message)\n        }\n      }\n      query = `EXECUTE request_query USING ${request.params\n        .map((param) => this.stringify(param.value))\n        .join(', ')}`\n    }\n    const iter = await this.client.query(query)\n\n    const rows: unknown[][] = []\n    let fields: Field[] = []\n    for await (const data of iter) {\n      if (data.error) {\n        throw new QueryError(data.error.message)\n      }\n\n      if (!fields.length && data.columns) {\n        fields = data.columns.map((column) => ({\n          name: column.name,\n          type: this.convertDataType(column.type),\n        }))\n      }\n      rows.push(...(data.data ?? []))\n    }\n\n    return new QueryResult({\n      rowCount: rows.length,\n      fields,\n      rows,\n    })\n  }\n\n  private stringify(value: unknown): string {\n    if (typeof value === 'string') {\n      return `'${value.replace(/'/g, \"''\")}'` // Escape single quotes\n    }\n    return String(value)\n  }\n\n  private convertDataType(\n    dataType: string,\n    fallbackType = DataType.Unknown,\n  ): DataType {\n    switch (dataType.toLowerCase().split('(')[0]) {\n      case 'boolean':\n        return DataType.Boolean\n      case 'integer':\n      case 'int':\n      case 'bigint':\n      case 'smallint':\n      case 'tinyint':\n        return DataType.Integer\n      case 'real':\n      case 'double':\n      case 'decimal':\n        return DataType.Float\n      case 'varchar':\n      case 'char':\n      case 'string':\n        return DataType.String\n      case 'date':\n      case 'time':\n      case 'timestamp':\n        return DataType.Datetime\n      default:\n        return fallbackType\n    }\n  }\n}\n"],"names":[],"mappings":";;;;AAiBM,MAAO,cAAe,SAAQ,aAAa,CAAA;AACvC,IAAA,MAAM,CAAO;IAErB,WAAY,CAAA,QAAgB,EAAE,gBAAkC,EAAA;QAC9D,KAAK,CAAC,QAAQ,CAAC,CAAA;AACf,QAAA,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;YACzB,MAAM,EAAE,gBAAgB,CAAC,MAAM;YAC/B,OAAO,EAAE,gBAAgB,CAAC,OAAO;YACjC,MAAM,EAAE,gBAAgB,CAAC,MAAM;YAC/B,IAAI,EAAE,IAAI,SAAS,CAAC,gBAAgB,CAAC,QAAQ,EAAE,gBAAgB,CAAC,QAAQ,CAAC;AAC1E,SAAA,CAAC,CAAA;KACH;IAED,OAAO,CAAC,KAAc,EAAE,CAAS,EAAA;QAC/B,OAAO;YACL,KAAK;AACL,YAAA,UAAU,EAAE,GAAG;SAChB,CAAA;KACF;IAED,MAAM,QAAQ,CAAC,OAAsB,EAAA;AACnC,QAAA,IAAI,KAAK,GAAG,OAAO,CAAC,GAAG,CAAA;AACvB,QAAA,IAAI,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE;AACzB,YAAA,MAAM,aAAa,GAAG,CAAA,4BAAA,EAA+B,OAAO,CAAC,GAAG,GAAG,CAAA;YACnE,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAA;AAC1D,YAAA,WAAW,MAAM,IAAI,IAAI,WAAW,EAAE;AACpC,gBAAA,IAAI,IAAI,CAAC,KAAK,EAAE;oBACd,MAAM,IAAI,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA;iBACzC;aACF;AACD,YAAA,KAAK,GAAG,CAAA,4BAAA,EAA+B,OAAO,CAAC,MAAM;AAClD,iBAAA,GAAG,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AAC3C,iBAAA,IAAI,CAAC,IAAI,CAAC,CAAA,CAAE,CAAA;SAChB;QACD,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;QAE3C,MAAM,IAAI,GAAgB,EAAE,CAAA;QAC5B,IAAI,MAAM,GAAY,EAAE,CAAA;AACxB,QAAA,WAAW,MAAM,IAAI,IAAI,IAAI,EAAE;AAC7B,YAAA,IAAI,IAAI,CAAC,KAAK,EAAE;gBACd,MAAM,IAAI,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA;aACzC;YAED,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE;AAClC,gBAAA,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,MAAM;oBACrC,IAAI,EAAE,MAAM,CAAC,IAAI;oBACjB,IAAI,EAAE,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC;AACxC,iBAAA,CAAC,CAAC,CAAA;aACJ;AACD,YAAA,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE,EAAE,CAAA;SAChC;QAED,OAAO,IAAI,WAAW,CAAC;YACrB,QAAQ,EAAE,IAAI,CAAC,MAAM;YACrB,MAAM;YACN,IAAI;AACL,SAAA,CAAC,CAAA;KACH;AAEO,IAAA,SAAS,CAAC,KAAc,EAAA;AAC9B,QAAA,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;AAC7B,YAAA,OAAO,CAAI,CAAA,EAAA,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA,CAAA,CAAG,CAAA;SACxC;AACD,QAAA,OAAO,MAAM,CAAC,KAAK,CAAC,CAAA;KACrB;AAEO,IAAA,eAAe,CACrB,QAAgB,EAChB,YAAY,GAAG,QAAQ,CAAC,OAAO,EAAA;AAE/B,QAAA,QAAQ,QAAQ,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC1C,YAAA,KAAK,SAAS;gBACZ,OAAO,QAAQ,CAAC,OAAO,CAAA;AACzB,YAAA,KAAK,SAAS,CAAC;AACf,YAAA,KAAK,KAAK,CAAC;AACX,YAAA,KAAK,QAAQ,CAAC;AACd,YAAA,KAAK,UAAU,CAAC;AAChB,YAAA,KAAK,SAAS;gBACZ,OAAO,QAAQ,CAAC,OAAO,CAAA;AACzB,YAAA,KAAK,MAAM,CAAC;AACZ,YAAA,KAAK,QAAQ,CAAC;AACd,YAAA,KAAK,SAAS;gBACZ,OAAO,QAAQ,CAAC,KAAK,CAAA;AACvB,YAAA,KAAK,SAAS,CAAC;AACf,YAAA,KAAK,MAAM,CAAC;AACZ,YAAA,KAAK,QAAQ;gBACX,OAAO,QAAQ,CAAC,MAAM,CAAA;AACxB,YAAA,KAAK,MAAM,CAAC;AACZ,YAAA,KAAK,MAAM,CAAC;AACZ,YAAA,KAAK,WAAW;gBACd,OAAO,QAAQ,CAAC,QAAQ,CAAA;AAC1B,YAAA;AACE,gBAAA,OAAO,YAAY,CAAA;SACtB;KACF;AACF;;;;"}