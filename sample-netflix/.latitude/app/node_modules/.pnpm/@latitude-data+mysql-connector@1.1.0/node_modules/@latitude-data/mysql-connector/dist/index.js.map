{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import {\n  BaseConnector,\n  ConnectionError,\n  CompiledQuery,\n  ResolvedParam,\n  QueryError,\n} from '@latitude-data/base-connector'\nimport { readFileSync } from 'fs'\nimport { PoolConfig, Types, createPool } from 'mysql'\nimport QueryResult, { DataType, Field } from '@latitude-data/query_result'\n\nexport type SSLConfig = {\n  ca?: string\n  key?: string\n  cert?: string\n  rejectUnauthorized?: boolean\n}\n\ntype SSLOptions = boolean | 'Amazon RDS' | SSLConfig\n\nexport type ConnectionParams = {\n  host: string\n  user: string\n  password: string\n  database: string\n  ssl?: SSLOptions\n}\n\nexport class MysqlConnector extends BaseConnector {\n  private pool\n\n  constructor(rootPath: string, connectionParams: ConnectionParams) {\n    super(rootPath)\n\n    this.pool = createPool({\n      connectionLimit: 10,\n      ...this.buildConnectionParams(connectionParams),\n    })\n  }\n\n  resolve(value: unknown, _: number): ResolvedParam {\n    return {\n      value,\n      resolvedAs: '?',\n    }\n  }\n\n  runQuery(query: CompiledQuery): Promise<QueryResult> {\n    return new Promise((resolve, reject) => {\n      this.pool.getConnection((err, connection) => {\n        if (err) {\n          return reject(new ConnectionError(err.message))\n        }\n\n        connection.query(\n          query.sql,\n          this.buildQueryParams(query.params),\n          (error, results, fields) => {\n            connection.release()\n\n            if (error) {\n              return reject(new QueryError(error.message))\n            }\n\n            resolve(\n              new QueryResult({\n                rowCount: results.length,\n                fields: (fields ?? [])?.map(\n                  (field) =>\n                    ({\n                      name: field.name,\n                      type: this.convertDataType(field.type),\n                    }) as Field,\n                ),\n                rows: results.map((row: Record<string, unknown>) =>\n                  row ? Object.values(row) : [],\n                ),\n              }),\n            )\n          },\n        )\n      })\n    })\n  }\n\n  private buildConnectionParams(params: ConnectionParams) {\n    const payload = {\n      host: params.host,\n      user: params.user,\n      password: params.password,\n      database: params.database,\n      ssl:\n        params.ssl !== undefined ? this.buildSSLConfig(params.ssl) : undefined,\n    } as Partial<PoolConfig>\n\n    return this.compact(payload)\n  }\n\n  private buildSSLConfig(ssl: SSLOptions) {\n    if (ssl === 'Amazon RDS') return 'Amazon RDS'\n    if (typeof ssl === 'boolean') {\n      if (ssl) return {}\n      else return undefined\n    }\n\n    const { ca, key, cert, rejectUnauthorized } = ssl\n    const payload = {\n      rejectUnauthorized,\n      ca: ca ? this.readSecureFile(ca) : undefined,\n      key: key ? this.readSecureFile(key) : undefined,\n      cert: cert ? this.readSecureFile(cert) : undefined,\n    }\n\n    return this.compact(payload)\n  }\n\n  private readSecureFile(filePath: string) {\n    try {\n      return readFileSync(filePath).toString()\n    } catch (error) {\n      throw new Error(\n        `Failed to read file at ${filePath}: ${(error as Error).message}`,\n      )\n    }\n  }\n\n  private compact(obj: Record<string, unknown>) {\n    return Object.fromEntries(\n      Object.entries(obj).filter(([, value]) => value !== undefined),\n    )\n  }\n\n  private buildQueryParams(params: ResolvedParam[]) {\n    return params.map((param) => param.value)\n  }\n\n  private convertDataType(dataTypeID: Types, fallbackType = DataType.Unknown) {\n    switch (dataTypeID) {\n      case Types.VARCHAR:\n      case Types.VAR_STRING:\n      case Types.STRING:\n        return DataType.String\n      case Types.TINY:\n      case Types.SHORT:\n      case Types.LONG:\n      case Types.INT24:\n        return DataType.Integer\n      case Types.DECIMAL:\n      case Types.FLOAT:\n      case Types.DOUBLE:\n      case Types.NEWDECIMAL:\n        return DataType.Float\n      case Types.TIME:\n      case Types.TIME2:\n      case Types.TIMESTAMP2:\n      case Types.DATETIME:\n      case Types.DATETIME2:\n      case Types.YEAR:\n      case Types.NEWDATE:\n      case Types.TIMESTAMP:\n        return DataType.Datetime\n      case Types.BLOB:\n      case Types.TINY_BLOB:\n      case Types.MEDIUM_BLOB:\n      case Types.LONG_BLOB:\n      case Types.ENUM:\n      case Types.JSON:\n      case Types.SET:\n      case Types.NULL:\n      case Types.GEOMETRY:\n      case Types.BIT:\n        return fallbackType\n    }\n  }\n}\n"],"names":[],"mappings":"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"}