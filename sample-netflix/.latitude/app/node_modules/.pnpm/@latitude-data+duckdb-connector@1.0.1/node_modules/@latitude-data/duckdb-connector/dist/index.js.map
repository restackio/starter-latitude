{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import {\n  BaseConnector,\n  CompiledQuery,\n  ConnectorError,\n  ResolvedParam,\n} from '@latitude-data/base-connector'\nimport QueryResult, { DataType, Field } from '@latitude-data/query_result'\nimport { Database, OPEN_READONLY, OPEN_READWRITE } from 'duckdb-async'\n\nexport type ConnectionParams = {\n  url?: string\n}\n\nexport class DuckdbConnector extends BaseConnector {\n  private url: string\n\n  constructor(rootPath: string, connectionParams: ConnectionParams) {\n    super(rootPath)\n\n    this.url = connectionParams.url || ':memory:'\n  }\n\n  resolve(value: unknown): ResolvedParam {\n    return {\n      value,\n      resolvedAs: '?',\n    }\n  }\n\n  async runQuery(query: CompiledQuery): Promise<QueryResult> {\n    try {\n      const client = await Database.create(\n        this.url,\n        this.url === ':memory:' ? OPEN_READWRITE : OPEN_READONLY,\n      )\n      const conn = await client.connect()\n\n      let results = []\n      if (query.params.length > 0) {\n        const stmt = await conn.prepare(query.sql)\n        results = await stmt.all(...this.buildQueryParams(query.params))\n        stmt.finalize()\n      } else {\n        results = await conn.all(query.sql)\n      }\n      const rows = results.map((row) => Object.values(row))\n      const rowCount = results.length\n      const firstRow = results[0]\n      const fields = firstRow\n        ? Object.keys(firstRow).map(\n            (key) =>\n              ({\n                name: key,\n                type: DataType.String,\n              }) as Field,\n          )\n        : []\n\n      return new QueryResult({ fields, rows, rowCount })\n    } catch (error) {\n      throw new ConnectorError((error as Error).message)\n    }\n  }\n\n  private buildQueryParams(params: ResolvedParam[]) {\n    return params.map((param) => param.value)\n  }\n}\n"],"names":[],"mappings":";;;;AAaM,MAAO,eAAgB,SAAQ,aAAa,CAAA;AACxC,IAAA,GAAG,CAAQ;IAEnB,WAAY,CAAA,QAAgB,EAAE,gBAAkC,EAAA;QAC9D,KAAK,CAAC,QAAQ,CAAC,CAAA;QAEf,IAAI,CAAC,GAAG,GAAG,gBAAgB,CAAC,GAAG,IAAI,UAAU,CAAA;KAC9C;AAED,IAAA,OAAO,CAAC,KAAc,EAAA;QACpB,OAAO;YACL,KAAK;AACL,YAAA,UAAU,EAAE,GAAG;SAChB,CAAA;KACF;IAED,MAAM,QAAQ,CAAC,KAAoB,EAAA;AACjC,QAAA,IAAI;YACF,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,MAAM,CAClC,IAAI,CAAC,GAAG,EACR,IAAI,CAAC,GAAG,KAAK,UAAU,GAAG,cAAc,GAAG,aAAa,CACzD,CAAA;AACD,YAAA,MAAM,IAAI,GAAG,MAAM,MAAM,CAAC,OAAO,EAAE,CAAA;YAEnC,IAAI,OAAO,GAAG,EAAE,CAAA;YAChB,IAAI,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC3B,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;AAC1C,gBAAA,OAAO,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAA;gBAChE,IAAI,CAAC,QAAQ,EAAE,CAAA;aAChB;iBAAM;gBACL,OAAO,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;aACpC;AACD,YAAA,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAA;AACrD,YAAA,MAAM,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAA;AAC/B,YAAA,MAAM,QAAQ,GAAG,OAAO,CAAC,CAAC,CAAC,CAAA;YAC3B,MAAM,MAAM,GAAG,QAAQ;AACrB,kBAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CACvB,CAAC,GAAG,MACD;AACC,oBAAA,IAAI,EAAE,GAAG;oBACT,IAAI,EAAE,QAAQ,CAAC,MAAM;AACtB,iBAAA,CAAU,CACd;kBACD,EAAE,CAAA;YAEN,OAAO,IAAI,WAAW,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAA;SACnD;QAAC,OAAO,KAAK,EAAE;AACd,YAAA,MAAM,IAAI,cAAc,CAAE,KAAe,CAAC,OAAO,CAAC,CAAA;SACnD;KACF;AAEO,IAAA,gBAAgB,CAAC,MAAuB,EAAA;AAC9C,QAAA,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,KAAK,CAAC,CAAA;KAC1C;AACF;;;;"}