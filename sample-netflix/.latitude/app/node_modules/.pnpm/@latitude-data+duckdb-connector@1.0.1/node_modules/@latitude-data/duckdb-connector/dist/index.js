import { BaseConnector, ConnectorError } from '@latitude-data/base-connector';
import QueryResult, { DataType } from '@latitude-data/query_result';
import { Database, OPEN_READWRITE, OPEN_READONLY } from 'duckdb-async';

class DuckdbConnector extends BaseConnector {
    url;
    constructor(rootPath, connectionParams) {
        super(rootPath);
        this.url = connectionParams.url || ':memory:';
    }
    resolve(value) {
        return {
            value,
            resolvedAs: '?',
        };
    }
    async runQuery(query) {
        try {
            const client = await Database.create(this.url, this.url === ':memory:' ? OPEN_READWRITE : OPEN_READONLY);
            const conn = await client.connect();
            let results = [];
            if (query.params.length > 0) {
                const stmt = await conn.prepare(query.sql);
                results = await stmt.all(...this.buildQueryParams(query.params));
                stmt.finalize();
            }
            else {
                results = await conn.all(query.sql);
            }
            const rows = results.map((row) => Object.values(row));
            const rowCount = results.length;
            const firstRow = results[0];
            const fields = firstRow
                ? Object.keys(firstRow).map((key) => ({
                    name: key,
                    type: DataType.String,
                }))
                : [];
            return new QueryResult({ fields, rows, rowCount });
        }
        catch (error) {
            throw new ConnectorError(error.message);
        }
    }
    buildQueryParams(params) {
        return params.map((param) => param.value);
    }
}

export { DuckdbConnector };
//# sourceMappingURL=index.js.map
