"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const RetryError_1 = __importStar(require("../../errors/RetryError"));
function getRetryDelay(attempt, config) {
    const scale = Math.max(1, Math.pow(1.5, (attempt - 1))); // ensure scale >= 1
    return Math.min(config.retryDelayMin * scale, config.retryDelayMax);
}
function delay(milliseconds) {
    return new Promise((resolve) => {
        setTimeout(() => resolve(), milliseconds);
    });
}
class HttpRetryPolicy {
    constructor(context) {
        this.context = context;
        this.startTime = Date.now();
        this.attempt = 0;
    }
    shouldRetry(response) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!response.ok) {
                switch (response.status) {
                    // On these status codes it's safe to retry the request. However,
                    // both error codes mean that server is overwhelmed or even down.
                    // Therefore, we need to add some delay between attempts so
                    // server can recover and more likely handle next request
                    case 429: // Too Many Requests
                    case 503: // Service Unavailable
                        this.attempt += 1;
                        const clientConfig = this.context.getConfig();
                        // Delay interval depends on current attempt - the more attempts we do
                        // the longer the interval will be
                        // TODO: Respect `Retry-After` header (PECO-729)
                        const retryDelay = getRetryDelay(this.attempt, clientConfig);
                        const attemptsExceeded = this.attempt >= clientConfig.retryMaxAttempts;
                        if (attemptsExceeded) {
                            throw new RetryError_1.default(RetryError_1.RetryErrorCode.AttemptsExceeded, response);
                        }
                        const timeoutExceeded = Date.now() - this.startTime + retryDelay >= clientConfig.retriesTimeout;
                        if (timeoutExceeded) {
                            throw new RetryError_1.default(RetryError_1.RetryErrorCode.TimeoutExceeded, response);
                        }
                        return { shouldRetry: true, retryAfter: retryDelay };
                    // TODO: Here we should handle other error types (see PECO-730)
                    // no default
                }
            }
            return { shouldRetry: false };
        });
    }
    invokeWithRetry(operation) {
        return __awaiter(this, void 0, void 0, function* () {
            for (;;) {
                const response = yield operation(); // eslint-disable-line no-await-in-loop
                const status = yield this.shouldRetry(response); // eslint-disable-line no-await-in-loop
                if (!status.shouldRetry) {
                    return response;
                }
                yield delay(status.retryAfter); // eslint-disable-line no-await-in-loop
            }
        });
    }
}
exports.default = HttpRetryPolicy;
//# sourceMappingURL=HttpRetryPolicy.js.map