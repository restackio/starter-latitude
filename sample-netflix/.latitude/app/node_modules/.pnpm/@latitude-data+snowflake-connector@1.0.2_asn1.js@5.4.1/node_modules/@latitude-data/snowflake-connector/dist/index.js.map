{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import {\n  BaseConnector,\n  ConnectionError,\n  CompiledQuery,\n  ResolvedParam,\n  ConnectorError,\n} from '@latitude-data/base-connector'\nimport QueryResult, { DataType } from '@latitude-data/query_result'\nimport pkg from 'snowflake-sdk'\n\nconst { createPool } = pkg\n\nexport type ConnectionParams = {\n  account: string\n  username?: string\n  password?: string\n  token?: string\n  privateKey?: string\n  privateKeyPath?: string\n  privateKeyPass?: string\n}\n\nexport class SnowflakeConnector extends BaseConnector {\n  private pool\n\n  constructor(rootPath: string, connectionParams: ConnectionParams) {\n    super(rootPath)\n\n    this.pool = createPool(this.buildConnectionParams(connectionParams), {\n      max: 10,\n      min: 0,\n    })\n  }\n\n  resolve(value: unknown, index: number): ResolvedParam {\n    return {\n      value,\n      resolvedAs: `$${index + 1}`,\n    }\n  }\n\n  runQuery(query: CompiledQuery): Promise<QueryResult> {\n    return new Promise((resolve, reject) => {\n      this.pool.use(async (connection) => {\n        connection.execute({\n          sqlText: query.sql,\n          binds: this.buildQueryParams(query.params),\n          streamResult: true,\n          complete: (err, stmt) => {\n            if (err) {\n              return reject(new ConnectorError(err.message))\n            }\n\n            const stream = stmt.streamRows()\n            const fields = stmt.getColumns().map((field) => ({\n              name: field.getName(),\n              type: this.convertDataType(field.getType()),\n            }))\n\n            const result = new QueryResult({\n              fields,\n              rowCount: stmt.getNumRows(),\n            })\n\n            stream.on('error', (err) => {\n              reject(new ConnectorError(err.message))\n            })\n\n            stream.on('data', (row) => {\n              result.rows.push(Object.values(row))\n            })\n\n            stream.on('end', () => {\n              resolve(result)\n            })\n          },\n        })\n      })\n    })\n  }\n\n  private buildConnectionParams(params: ConnectionParams) {\n    if (params.username) {\n      return {\n        account: params.account,\n        username: params.username,\n        password: params.password,\n      }\n    } else if (params.token) {\n      return {\n        account: params.account,\n        token: params.token,\n      }\n    } else if (params.privateKey) {\n      return {\n        account: params.account,\n        privateKey: params.privateKey,\n      }\n    } else if (params.privateKeyPath) {\n      return {\n        account: params.account,\n        privateKeyPath: params.privateKeyPath,\n        privateKeyPass: params.privateKeyPass,\n      }\n    } else {\n      throw new ConnectionError('No valid credentials provided')\n    }\n  }\n\n  private buildQueryParams(params: ResolvedParam[]) {\n    return params.map((param) => param.value) as pkg.Bind[]\n  }\n\n  private convertDataType(\n    dataTypeID: string,\n    fallbackType = DataType.Unknown,\n  ): DataType {\n    switch (dataTypeID) {\n      case 'boolean':\n        return DataType.Boolean\n      case 'int':\n      case 'integer':\n      case 'bigint':\n      case 'smallint':\n        return DataType.Integer\n      case 'number':\n      case 'numeric':\n      case 'decimal':\n      case 'float':\n      case 'float4':\n      case 'float8':\n      case 'double':\n      case 'double precision':\n      case 'real':\n      case 'fixed':\n        return DataType.Float\n      case 'text':\n        return DataType.String\n      case 'date':\n      case 'time':\n      case 'timestamp':\n      case 'timestamp_ltz':\n      case 'timestamp_ntz':\n      case 'timestamp_tz':\n        return DataType.Datetime\n      case 'variant':\n      case 'array':\n      case 'object':\n      default:\n        return fallbackType\n    }\n  }\n}\n"],"names":[],"mappings":"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"}