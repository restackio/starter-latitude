import { BaseConnector, ConnectorError, ConnectionError } from '@latitude-data/base-connector';
import QueryResult, { DataType } from '@latitude-data/query_result';
import pkg from 'snowflake-sdk';

const { createPool } = pkg;
class SnowflakeConnector extends BaseConnector {
    pool;
    constructor(rootPath, connectionParams) {
        super(rootPath);
        this.pool = createPool(this.buildConnectionParams(connectionParams), {
            max: 10,
            min: 0,
        });
    }
    resolve(value, index) {
        return {
            value,
            resolvedAs: `$${index + 1}`,
        };
    }
    runQuery(query) {
        return new Promise((resolve, reject) => {
            this.pool.use(async (connection) => {
                connection.execute({
                    sqlText: query.sql,
                    binds: this.buildQueryParams(query.params),
                    streamResult: true,
                    complete: (err, stmt) => {
                        if (err) {
                            return reject(new ConnectorError(err.message));
                        }
                        const stream = stmt.streamRows();
                        const fields = stmt.getColumns().map((field) => ({
                            name: field.getName(),
                            type: this.convertDataType(field.getType()),
                        }));
                        const result = new QueryResult({
                            fields,
                            rowCount: stmt.getNumRows(),
                        });
                        stream.on('error', (err) => {
                            reject(new ConnectorError(err.message));
                        });
                        stream.on('data', (row) => {
                            result.rows.push(Object.values(row));
                        });
                        stream.on('end', () => {
                            resolve(result);
                        });
                    },
                });
            });
        });
    }
    buildConnectionParams(params) {
        if (params.username) {
            return {
                account: params.account,
                username: params.username,
                password: params.password,
            };
        }
        else if (params.token) {
            return {
                account: params.account,
                token: params.token,
            };
        }
        else if (params.privateKey) {
            return {
                account: params.account,
                privateKey: params.privateKey,
            };
        }
        else if (params.privateKeyPath) {
            return {
                account: params.account,
                privateKeyPath: params.privateKeyPath,
                privateKeyPass: params.privateKeyPass,
            };
        }
        else {
            throw new ConnectionError('No valid credentials provided');
        }
    }
    buildQueryParams(params) {
        return params.map((param) => param.value);
    }
    convertDataType(dataTypeID, fallbackType = DataType.Unknown) {
        switch (dataTypeID) {
            case 'boolean':
                return DataType.Boolean;
            case 'int':
            case 'integer':
            case 'bigint':
            case 'smallint':
                return DataType.Integer;
            case 'number':
            case 'numeric':
            case 'decimal':
            case 'float':
            case 'float4':
            case 'float8':
            case 'double':
            case 'double precision':
            case 'real':
            case 'fixed':
                return DataType.Float;
            case 'text':
                return DataType.String;
            case 'date':
            case 'time':
            case 'timestamp':
            case 'timestamp_ltz':
            case 'timestamp_ntz':
            case 'timestamp_tz':
                return DataType.Datetime;
            case 'variant':
            case 'array':
            case 'object':
            default:
                return fallbackType;
        }
    }
}

export { SnowflakeConnector };
//# sourceMappingURL=index.js.map
