import type { EChartsOption } from 'echarts';
import { type Dataset } from '../../types';
import { CartesianChartType } from '../types';
import { ConfigProps, yAxis, xAxis } from './types';
import { Sort } from '../common/getDataset';
import { ColumnConfig } from './getColumns';
export type AnimationEasing = 'linear' | 'quadraticIn' | 'quadraticOut' | 'quadraticInOut' | 'cubicIn' | 'cubicOut' | 'cubicInOut' | 'quarticIn' | 'quarticOut' | 'quarticInOut' | 'quinticIn' | 'quinticOut' | 'quinticInOut' | 'sinusoidalIn' | 'sinusoidalOut' | 'sinusoidalInOut' | 'exponentialIn' | 'exponentialOut' | 'exponentialInOut' | 'circularIn' | 'circularOut' | 'circularInOut' | 'elasticIn' | 'elasticOut' | 'elasticInOut' | 'backIn' | 'backOut' | 'backInOut' | 'bounceIn' | 'bounceOut' | 'bounceInOut';
export type Props = {
    animation?: boolean;
    animationEasing?: AnimationEasing;
    animationEasingUpdate?: AnimationEasing;
    dataset: Dataset;
    x: ColumnConfig;
    y: ColumnConfig;
    sort?: Sort;
    swapAxis?: boolean;
    xTitle?: string;
    yTitle?: string;
    xFormat?: xAxis;
    yFormat?: yAxis;
    config?: ConfigProps;
    hiddenSeries?: string[];
};
type CartesianProps = Props & {
    chartType?: CartesianChartType;
};
export default function generateConfig({ chartType, animation, animationEasing, animationEasingUpdate, dataset, swapAxis, x, xTitle, y, yTitle, xFormat, yFormat, sort, hiddenSeries, config, }: CartesianProps): EChartsOption | null | undefined;
export {};
//# sourceMappingURL=index.d.ts.map