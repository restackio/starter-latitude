import { EChartsOption } from 'echarts';
import * as echarts_types_dist_echarts from 'echarts/types/dist/echarts';
import * as tailwind_variants from 'tailwind-variants';
import { VariantProps as VariantProps$1 } from 'tailwind-variants';
import * as tailwind_variants_dist_config from 'tailwind-variants/dist/config';
import { ClassValue } from 'clsx';
import * as zustand_vanilla from 'zustand/vanilla';
import QueryResult from '@latitude-data/query_result';

type DBSourceColumn = string | number;
type DBSourceRow = DBSourceColumn[];
type DBSource = DBSourceRow[];
type Dataset = {
    fields: string[];
    source: DBSource;
};

type BaseSortItem = {
    order: 'asc' | 'desc';
    incomparable?: 'min' | 'max';
    parser?: 'time' | 'number' | 'trim';
};
type SortItem = BaseSortItem & {
    column: string;
};
type Sort = string | SortItem | SortItem[];

type ConfigProps$1 = {
    showDecal?: boolean;
    showLegend?: boolean;
    showTotalValue?: boolean;
    showHole?: boolean;
    showLabels?: boolean;
};
type PieChartProps$1 = {
    dataset: Dataset;
    sort?: Sort;
    displayName?: string;
    animation?: boolean;
    config?: ConfigProps$1;
};
declare function generatePieConfig({ dataset, sort, displayName, animation, config: { showLabels, showTotalValue, showDecal, showLegend, showHole, }, }: PieChartProps$1): EChartsOption;

declare const CARTESIAN_CHART_TYPES: {
    line: string;
    bar: string;
    area: string;
    scatter: string;
};
type CartesianChartType = keyof typeof CARTESIAN_CHART_TYPES;
declare enum AxisType {
    category = "category",
    value = "value",
    time = "time",
    log = "log"
}

declare const CHART_TYPES: {
    line: string;
    bar: string;
    area: string;
    scatter: string;
};
type ChartType = keyof typeof CHART_TYPES;
type Column = {
    name: string;
    chartType?: ChartType;
    displayName?: string | null;
    axisIndex?: number;
};
declare enum AxisAlign {
    start = "start",
    end = "end"
}
type CommonAxisFormat = {
    type?: AxisType;
    showAxis?: boolean;
    rotate?: number;
    displayName?: string | null;
    showAxisTitle?: boolean;
    showSplitLine?: boolean;
    axisAlign?: AxisAlign;
};
type xAxisFormat = CommonAxisFormat;
type yAxisFormat = CommonAxisFormat & {
    stack: boolean | 'normalized';
};
type xAxis = xAxisFormat | xAxisFormat[];
type yAxis = yAxisFormat | yAxisFormat[];
type ScatterStyle = 'circle' | 'emptyCircle';
type ScatterConfig = {
    column?: string;
    style?: ScatterStyle;
};
type ConfigProps = {
    showDots?: boolean;
    showValues?: boolean;
    showZoom?: boolean;
    showDecal?: boolean;
    showLegend?: boolean;
    scatterConfig?: ScatterConfig;
    echartsConfig?: EChartsOption;
};

type ColumnConfig = string | Column | Column[] | (string | Column)[];

type AnimationEasing = 'linear' | 'quadraticIn' | 'quadraticOut' | 'quadraticInOut' | 'cubicIn' | 'cubicOut' | 'cubicInOut' | 'quarticIn' | 'quarticOut' | 'quarticInOut' | 'quinticIn' | 'quinticOut' | 'quinticInOut' | 'sinusoidalIn' | 'sinusoidalOut' | 'sinusoidalInOut' | 'exponentialIn' | 'exponentialOut' | 'exponentialInOut' | 'circularIn' | 'circularOut' | 'circularInOut' | 'elasticIn' | 'elasticOut' | 'elasticInOut' | 'backIn' | 'backOut' | 'backInOut' | 'bounceIn' | 'bounceOut' | 'bounceInOut';
type Props$2 = {
    animation?: boolean;
    animationEasing?: AnimationEasing;
    animationEasingUpdate?: AnimationEasing;
    dataset: Dataset;
    x: ColumnConfig;
    y: ColumnConfig;
    sort?: Sort;
    swapAxis?: boolean;
    xTitle?: string;
    yTitle?: string;
    xFormat?: xAxis;
    yFormat?: yAxis;
    config?: ConfigProps;
    hiddenSeries?: string[];
};
type CartesianProps = Props$2 & {
    chartType?: CartesianChartType;
};
declare function generateConfig({ chartType, animation, animationEasing, animationEasingUpdate, dataset, swapAxis, x, xTitle, y, yTitle, xFormat, yFormat, sort, hiddenSeries, config, }: CartesianProps): EChartsOption | null | undefined;

type FunnelDirection = 'ascending' | 'descending';
type FunnelOrientation = 'vertical' | 'horizontal';
type FunnelChartProps$1 = {
    dataset: Dataset;
    sort?: FunnelDirection;
    orientation?: FunnelOrientation;
    showColorGradient?: boolean;
    showDecal?: boolean;
    showLegend?: boolean;
    showLabels?: boolean;
    animation?: boolean;
    animationEasing?: AnimationEasing;
    animationEasingUpdate?: AnimationEasing;
};
declare function generateFunnelConfig({ dataset, animation, animationEasing, animationEasingUpdate, sort, orientation, showColorGradient, showLabels, showDecal, showLegend, }: FunnelChartProps$1): EChartsOption;

type ScatterChartProps$1 = Omit<Props$2, 'config'> & {
    sizeColumn: string;
    config?: Omit<Props$2['config'], 'scatterConfig'>;
    style?: ScatterStyle;
};
declare function generateScatterChart({ sizeColumn, style, config, ...rest }: ScatterChartProps$1): echarts_types_dist_echarts.EChartsOption | null | undefined;

type ThemeColor = {
    background: string;
    foreground: string;
    card: string;
    'card-foreground': string;
    popover: string;
    'popover-foreground': string;
    primary: string;
    'primary-foreground': string;
    secondary: string;
    'secondary-foreground': string;
    muted: string;
    'muted-foreground': string;
    accent: string;
    'accent-foreground': string;
    destructive: string;
    'destructive-foreground': string;
    border: string;
    input: string;
    ring: string;
    radius?: string;
};
type SkinCss = {
    light: ThemeColor;
    dark: ThemeColor;
};
type ThemeName = 'latitude' | 'rose' | 'green' | 'orange';
type Theme = {
    name: ThemeName;
    label?: string;
    cssVars: {
        light: ThemeColor;
        dark: ThemeColor;
    };
};

declare function buildCssVariables(theme: Theme): string;

declare const themes: Theme[];
declare const defaultTheme: Theme;

type index$A_SkinCss = SkinCss;
type index$A_Theme = Theme;
type index$A_ThemeColor = ThemeColor;
type index$A_ThemeName = ThemeName;
declare const index$A_buildCssVariables: typeof buildCssVariables;
declare const index$A_defaultTheme: typeof defaultTheme;
declare const index$A_themes: typeof themes;
declare namespace index$A {
  export { type index$A_SkinCss as SkinCss, type index$A_Theme as Theme, type index$A_ThemeColor as ThemeColor, type index$A_ThemeName as ThemeName, index$A_buildCssVariables as buildCssVariables, index$A_defaultTheme as defaultTheme, index$A_themes as themes };
}

declare const colors: {
    backgrounds: {
        transparent: string;
        primary: string;
        primary20: string;
        destructive: string;
        destructive20: string;
        destructiveForeground: string;
        green100: string;
        green500: string;
        yellow50: string;
        muted: string;
        mutedForeground: string;
    };
    textColors: {
        white: string;
        primary: string;
        secondary: string;
        destructive: string;
        accent: string;
        muted: string;
        mutedForeground: string;
        background: string;
        foreground: string;
        link: string;
        inherit: string;
        primaryForeground: string;
        destructiveForeground: string;
        yellow900: string;
        green700: string;
    };
};
type TextColor = keyof typeof colors.textColors;
type BackgroundColor = keyof typeof colors.backgrounds;

declare const ALERT_TYPES: {
    primary: string;
    green: string;
    alert: string;
    destructive: string;
    muted: string;
};
type AlertyType = keyof typeof ALERT_TYPES;
type AlertColor = {
    background: BackgroundColor;
    foreground: TextColor;
};
type Props$1 = {
    type: AlertyType;
    scrollable?: boolean;
    secondary?: boolean;
    className?: string | null;
};
declare function cssClass$t({ type, className, secondary, scrollable }: Props$1): {
    properties: {
        foreground: "white" | "link" | "background" | "foreground" | "primary" | "secondary" | "muted" | "accent" | "destructive" | "destructiveForeground" | "mutedForeground" | "inherit" | "primaryForeground" | "yellow900" | "green700";
    };
    root: string;
};

declare const index$z_ALERT_TYPES: typeof ALERT_TYPES;
type index$z_AlertColor = AlertColor;
type index$z_AlertyType = AlertyType;
declare namespace index$z {
  export { index$z_ALERT_TYPES as ALERT_TYPES, type index$z_AlertColor as AlertColor, type index$z_AlertyType as AlertyType, type Props$1 as Props, cssClass$t as cssClass };
}

declare enum ButtonVariant {
    Default = "default",
    Destructive = "destructive",
    Outline = "outline",
    Secondary = "secondary",
    Ghost = "ghost",
    Link = "link"
}
declare enum BUTTON_SIZE {
    Default = "default",
    Sm = "sm",
    Lg = "lg",
    Icon = "icon"
}
declare const BUTTON_VARIANTS: ButtonVariant[];
declare const BUTTON_SIZES: BUTTON_SIZE[];
type Variant$1 = VariantProps$1<typeof buttonVariants>['variant'];
type Size$1 = VariantProps$1<typeof buttonVariants>['size'];
declare const buttonVariants: tailwind_variants.TVReturnType<{
    variant: {
        default: string;
        destructive: string;
        outline: string;
        secondary: string;
        ghost: string;
        link: string;
    };
    size: {
        default: string;
        sm: string;
        lg: string;
        icon: string;
    };
}, undefined, "inline-flex items-center justify-center rounded-md text-sm font-medium whitespace-nowrap transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50", tailwind_variants_dist_config.TVConfig<{
    variant: {
        default: string;
        destructive: string;
        outline: string;
        secondary: string;
        ghost: string;
        link: string;
    };
    size: {
        default: string;
        sm: string;
        lg: string;
        icon: string;
    };
}, {
    variant: {
        default: string;
        destructive: string;
        outline: string;
        secondary: string;
        ghost: string;
        link: string;
    };
    size: {
        default: string;
        sm: string;
        lg: string;
        icon: string;
    };
}>, {
    variant: {
        default: string;
        destructive: string;
        outline: string;
        secondary: string;
        ghost: string;
        link: string;
    };
    size: {
        default: string;
        sm: string;
        lg: string;
        icon: string;
    };
}, undefined, tailwind_variants.TVReturnType<{
    variant: {
        default: string;
        destructive: string;
        outline: string;
        secondary: string;
        ghost: string;
        link: string;
    };
    size: {
        default: string;
        sm: string;
        lg: string;
        icon: string;
    };
}, undefined, "inline-flex items-center justify-center rounded-md text-sm font-medium whitespace-nowrap transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50", tailwind_variants_dist_config.TVConfig<{
    variant: {
        default: string;
        destructive: string;
        outline: string;
        secondary: string;
        ghost: string;
        link: string;
    };
    size: {
        default: string;
        sm: string;
        lg: string;
        icon: string;
    };
}, {
    variant: {
        default: string;
        destructive: string;
        outline: string;
        secondary: string;
        ghost: string;
        link: string;
    };
    size: {
        default: string;
        sm: string;
        lg: string;
        icon: string;
    };
}>, unknown, unknown, undefined>>;
type ClassProps$3 = {
    variant: Variant$1;
    size: Size$1;
    className?: string | null | undefined;
};
declare function cssClass$s({ variant, size, className }: ClassProps$3): string;

type index$y_BUTTON_SIZE = BUTTON_SIZE;
declare const index$y_BUTTON_SIZE: typeof BUTTON_SIZE;
declare const index$y_BUTTON_SIZES: typeof BUTTON_SIZES;
declare const index$y_BUTTON_VARIANTS: typeof BUTTON_VARIANTS;
type index$y_ButtonVariant = ButtonVariant;
declare const index$y_ButtonVariant: typeof ButtonVariant;
declare const index$y_buttonVariants: typeof buttonVariants;
declare namespace index$y {
  export { index$y_BUTTON_SIZE as BUTTON_SIZE, index$y_BUTTON_SIZES as BUTTON_SIZES, index$y_BUTTON_VARIANTS as BUTTON_VARIANTS, index$y_ButtonVariant as ButtonVariant, type Size$1 as Size, type Variant$1 as Variant, index$y_buttonVariants as buttonVariants, cssClass$s as cssClass };
}

declare function cssClass$r({ className, isRangeCalendar }: {
    className?: string | null;
    isRangeCalendar?: boolean;
}): string;

declare namespace index$x {
  export { cssClass$r as cssClass };
}

declare function cssClass$q({ className, isRangeCalendar }: {
    className?: string | null;
    isRangeCalendar?: boolean;
}): string;

declare namespace index$w {
  export { cssClass$q as cssClass };
}

declare function cssClass$p({ className }: {
    className?: string | null;
}): string;

declare namespace index$v {
  export { cssClass$p as cssClass };
}

declare function cssClass$o({ className }: {
    className?: string | null;
}): string;

declare namespace index$u {
  export { cssClass$o as cssClass };
}

declare function cssClass$n({ className }: {
    className?: string | null;
}): string;

declare namespace index$t {
  export { cssClass$n as cssClass };
}

declare function cssClass$m({ className }: {
    className?: string | null;
}): string;

declare namespace index$s {
  export { cssClass$m as cssClass };
}

declare function cssClass$l({ className }: {
    className?: string | null;
}): string;

declare namespace index$r {
  export { cssClass$l as cssClass };
}

declare function cssClass$k({ className }: {
    className?: string | null;
}): string;

declare namespace index$q {
  export { cssClass$k as cssClass };
}

declare function cssClass$j({ className }: {
    className?: string | null;
}): string;

declare namespace index$p {
  export { cssClass$j as cssClass };
}

declare function cssClass$i({ className }: {
    className?: string | null;
}): string;

declare namespace index$o {
  export { cssClass$i as cssClass };
}

declare function cssClass$h({ className }: {
    className?: string | null;
}): string;
declare const ICON_CSS_CLASS$2 = "h-4 w-4";

declare namespace index$n {
  export { ICON_CSS_CLASS$2 as ICON_CSS_CLASS, cssClass$h as cssClass };
}

declare function cssClass$g({ className }: {
    className?: string | null;
}): string;
declare const ICON_CSS_CLASS$1 = "h-4 w-4";

declare namespace index$m {
  export { ICON_CSS_CLASS$1 as ICON_CSS_CLASS, cssClass$g as cssClass };
}

declare function cssClass$f({ className }: {
    className?: string | null;
}): string;
declare const HEADER_ROW_CSS_CLASS = "flex";
declare const BODY_ROW_CSS_CLASS = "mt-2 w-full";

declare const index$l_BODY_ROW_CSS_CLASS: typeof BODY_ROW_CSS_CLASS;
declare const index$l_HEADER_ROW_CSS_CLASS: typeof HEADER_ROW_CSS_CLASS;
declare namespace index$l {
  export { index$l_BODY_ROW_CSS_CLASS as BODY_ROW_CSS_CLASS, index$l_HEADER_ROW_CSS_CLASS as HEADER_ROW_CSS_CLASS, index$x as cell, cssClass$f as cssClass, index$w as day, index$v as grid, index$u as gridBody, index$t as gridHead, index$s as gridRow, index$r as headCell, index$q as header, index$p as heading, index$o as months, index$n as nextButton, index$m as prevButton };
}

type CardType = VariantProps$1<typeof cardRootVariants>['type'];
declare const cardRootVariants: tailwind_variants.TVReturnType<{
    type: {
        normal: string;
        invisible: string;
    };
}, undefined, "rounded-xl bg-card text-card-foreground ", tailwind_variants_dist_config.TVConfig<{
    type: {
        normal: string;
        invisible: string;
    };
}, {
    type: {
        normal: string;
        invisible: string;
    };
}>, {
    type: {
        normal: string;
        invisible: string;
    };
}, undefined, tailwind_variants.TVReturnType<{
    type: {
        normal: string;
        invisible: string;
    };
}, undefined, "rounded-xl bg-card text-card-foreground ", tailwind_variants_dist_config.TVConfig<{
    type: {
        normal: string;
        invisible: string;
    };
}, {
    type: {
        normal: string;
        invisible: string;
    };
}>, unknown, unknown, undefined>>;
type ClassProps$2 = {
    className?: string | null | undefined;
};
type CardProps = ClassProps$2 & {
    type?: CardType;
};
declare function rootCssClass({ type, className }: CardProps): string;
declare function headerCssClass({ type, className }: CardProps): string;
declare function titleCssClass({ className }: ClassProps$2): string;
declare function descriptionCssClass({ className }: ClassProps$2): string;
declare function contentCssClass({ type, className }: CardProps): string;
declare function footerCssClass({ className }: ClassProps$2): string;

type index$k_CardProps = CardProps;
declare const index$k_contentCssClass: typeof contentCssClass;
declare const index$k_descriptionCssClass: typeof descriptionCssClass;
declare const index$k_footerCssClass: typeof footerCssClass;
declare const index$k_headerCssClass: typeof headerCssClass;
declare const index$k_rootCssClass: typeof rootCssClass;
declare const index$k_titleCssClass: typeof titleCssClass;
declare namespace index$k {
  export { type index$k_CardProps as CardProps, index$k_contentCssClass as contentCssClass, index$k_descriptionCssClass as descriptionCssClass, index$k_footerCssClass as footerCssClass, index$k_headerCssClass as headerCssClass, index$k_rootCssClass as rootCssClass, index$k_titleCssClass as titleCssClass };
}

declare enum ChartTheme {
    latitude = "latitude"
}
type ThemeObject = object & {
    visualMapColor: string[];
};
declare const THEMES: Record<ChartTheme, ThemeObject>;

declare function generateBarChart(props: Props$2): echarts_types_dist_echarts.EChartsOption | null | undefined;

declare function generateLineChart(props: Props$2): echarts_types_dist_echarts.EChartsOption | null | undefined;

declare function generateAreaChart(props: Props$2): echarts_types_dist_echarts.EChartsOption | null | undefined;

declare function blankSlateCssRoot(_: {
    loading: boolean;
}): string;
declare function blankSlateCssContent(): string;
declare const ERROR_CLASS: {
    wrapper: string;
};

type index$j_ChartTheme = ChartTheme;
declare const index$j_ChartTheme: typeof ChartTheme;
type index$j_DBSource = DBSource;
type index$j_Dataset = Dataset;
declare const index$j_ERROR_CLASS: typeof ERROR_CLASS;
declare const index$j_THEMES: typeof THEMES;
declare const index$j_blankSlateCssContent: typeof blankSlateCssContent;
declare const index$j_blankSlateCssRoot: typeof blankSlateCssRoot;
declare const index$j_generateFunnelConfig: typeof generateFunnelConfig;
declare const index$j_generatePieConfig: typeof generatePieConfig;
declare namespace index$j {
  export { index$j_ChartTheme as ChartTheme, type index$j_DBSource as DBSource, type index$j_Dataset as Dataset, index$j_ERROR_CLASS as ERROR_CLASS, index$j_THEMES as THEMES, index$j_blankSlateCssContent as blankSlateCssContent, index$j_blankSlateCssRoot as blankSlateCssRoot, generateAreaChart as generateAreaConfig, generateBarChart as generateBarConfig, generateConfig as generateCartesianConfig, index$j_generateFunnelConfig as generateFunnelConfig, generateLineChart as generateLineConfig, index$j_generatePieConfig as generatePieConfig, generateScatterChart as generateScatterConfig };
}

type LayoutProps = {
    className?: string | null | undefined;
};
declare function cssClass$e({ className }: LayoutProps): string;

type index$i_LayoutProps = LayoutProps;
declare namespace index$i {
  export { type index$i_LayoutProps as LayoutProps, cssClass$e as cssClass };
}

declare function cssClass$d({ className }: {
    className?: string;
}): string;
declare function selectCssClass({ isRange }: {
    isRange?: boolean;
}): string;
declare function buttonCssClass({ isRange }: {
    isRange?: boolean;
}): string;
declare const POPOVER_CONTENT_CSS_CLASS = "flex w-auto flex-col space-y-2 p-2";
declare const POPOVER_INNER_CSS_CLASS = "w-[250px]";
declare const TOGGLE_GROUP_CSS_CLASS = "p-0.5 gap-0.5";
declare const TOGGLE_BUTTON_CSS_CLASS = "h-8 w-8 p-0 data-[state=on]:bg-background data-[state=on]:text-primary data-[state=on]:shadow-sm data-[state=on]:border data-[state=on]:border-input";
declare const TOGGLE_ICON_CSS_CLASS = "h-4 w-4";

declare const index$h_POPOVER_CONTENT_CSS_CLASS: typeof POPOVER_CONTENT_CSS_CLASS;
declare const index$h_POPOVER_INNER_CSS_CLASS: typeof POPOVER_INNER_CSS_CLASS;
declare const index$h_TOGGLE_BUTTON_CSS_CLASS: typeof TOGGLE_BUTTON_CSS_CLASS;
declare const index$h_TOGGLE_GROUP_CSS_CLASS: typeof TOGGLE_GROUP_CSS_CLASS;
declare const index$h_TOGGLE_ICON_CSS_CLASS: typeof TOGGLE_ICON_CSS_CLASS;
declare const index$h_buttonCssClass: typeof buttonCssClass;
declare const index$h_selectCssClass: typeof selectCssClass;
declare namespace index$h {
  export { index$h_POPOVER_CONTENT_CSS_CLASS as POPOVER_CONTENT_CSS_CLASS, index$h_POPOVER_INNER_CSS_CLASS as POPOVER_INNER_CSS_CLASS, index$h_TOGGLE_BUTTON_CSS_CLASS as TOGGLE_BUTTON_CSS_CLASS, index$h_TOGGLE_GROUP_CSS_CLASS as TOGGLE_GROUP_CSS_CLASS, index$h_TOGGLE_ICON_CSS_CLASS as TOGGLE_ICON_CSS_CLASS, index$h_buttonCssClass as buttonCssClass, cssClass$d as cssClass, index$h_selectCssClass as selectCssClass };
}

declare function cssClass$c({ className }: {
    className?: string | null;
}): string;

declare namespace index$g {
  export { cssClass$c as cssClass };
}

declare function cssClass$b({ className }: {
    className?: string | null;
}): string;

declare namespace index$f {
  export { cssClass$b as cssClass };
}

declare function cssClass$a({ className }: {
    className?: string | null;
}): string;

declare namespace index$e {
  export { cssClass$a as cssClass };
}

declare function cssClass$9({ className }: {
    className?: string | null;
}): string;

declare namespace index$d {
  export { cssClass$9 as cssClass };
}

declare function cssClass$8({ className }: LayoutProps): string;

declare namespace index$c {
  export { cssClass$8 as cssClass };
}

declare function cssClass$7({ className }: {
    className?: string | null;
}): string;
declare const CONTAINER_CSS_CLASS = "w-full p-1";

declare const index$b_CONTAINER_CSS_CLASS: typeof CONTAINER_CSS_CLASS;
declare namespace index$b {
  export { index$b_CONTAINER_CSS_CLASS as CONTAINER_CSS_CLASS, cssClass$7 as cssClass };
}

declare function cssClass$6({ className }: {
    className?: string | null;
}): string;
declare const ITEM_CSS_CLASS = "absolute right-2 flex h-3.5 w-3.5 items-center justify-center";
declare const INDICATOR_CHECK_CSS_CLASS = "h-4 w-4";

declare const index$a_INDICATOR_CHECK_CSS_CLASS: typeof INDICATOR_CHECK_CSS_CLASS;
declare const index$a_ITEM_CSS_CLASS: typeof ITEM_CSS_CLASS;
declare namespace index$a {
  export { index$a_INDICATOR_CHECK_CSS_CLASS as INDICATOR_CHECK_CSS_CLASS, index$a_ITEM_CSS_CLASS as ITEM_CSS_CLASS, cssClass$6 as cssClass };
}

declare function cssClass$5({ className }: {
    className?: string | null;
}): string;

declare namespace index$9 {
  export { cssClass$5 as cssClass };
}

declare function cssClass$4({ className }: {
    className?: string | null;
}): string;

declare namespace index$8 {
  export { cssClass$4 as cssClass };
}

declare function cssClass$3({ className }: {
    className?: string | null;
}): string;
declare const ICON_CSS_CLASS = "h-4 w-4 opacity-50";

declare const index$7_ICON_CSS_CLASS: typeof ICON_CSS_CLASS;
declare namespace index$7 {
  export { index$7_ICON_CSS_CLASS as ICON_CSS_CLASS, cssClass$3 as cssClass };
}

declare namespace index$6 {
  export { index$b as content, index$a as item, index$9 as label, index$8 as separator, index$7 as trigger };
}

declare const zIndexes: {
    popover: string;
    selectContent: string;
    focusedCalendarCell: string;
};
type ZIndex = keyof typeof zIndexes;

declare const weights: {
    normal: string;
    medium: string;
    semibold: string;
    bold: string;
};
type FontWeight = keyof typeof weights;

declare const families: {
    sans: string;
    serif: string;
};
declare const leadings: {
    h1: string;
    h2: string;
    h3: string;
    h4: string;
    h5: string;
    h6: string;
    none: string;
};
declare const sizes: {
    h1: string;
    h2: string;
    h3: string;
    h4: string;
    h5: string;
    h6: string;
};
declare const spacings: {
    normal: string;
    wide: string;
};
declare const alignments: {
    left: string;
    center: string;
    right: string;
};
declare const wordBreaks: {
    normal: string;
    breakWord: string;
    breakAll: string;
};
declare const whiteSpaces: {
    normal: string;
    nowrap: string;
    pre: string;
    preLine: string;
    preWrap: string;
};
type FontSize = keyof typeof sizes;
type LetterSpacing = keyof typeof spacings;
type TextAlign = keyof typeof alignments;
type WordBreak = keyof typeof wordBreaks;
type WhiteSpace = keyof typeof whiteSpaces;
type LineHeight = keyof typeof leadings;
type FontFamily = keyof typeof families;
type TextProps = {
    as?: 'p' | 'span' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';
    capitalize?: boolean;
    class?: string | undefined | null;
    centered?: boolean;
    color?: TextColor;
    ellipsis?: boolean;
    lineThrough?: boolean;
    noWrap?: boolean;
    leading?: LineHeight;
    size?: FontSize;
    family?: FontFamily;
    underline?: boolean;
    uppercase?: boolean;
    userSelect?: boolean;
    spacing?: LetterSpacing;
    weight?: FontWeight;
    whiteSpace?: WhiteSpace;
    wordBreak?: WordBreak;
    align?: TextAlign;
};
type HeaderProps = Omit<TextProps, 'size' | 'leading' | 'as'>;
declare function cssClass$2({ family, capitalize, centered, class: className, size, leading, color, ellipsis, lineThrough, underline, uppercase, align, spacing, weight, whiteSpace, wordBreak, }: TextProps): string;

type index$5_FontFamily = FontFamily;
type index$5_FontSize = FontSize;
type index$5_HeaderProps = HeaderProps;
type index$5_LetterSpacing = LetterSpacing;
type index$5_LineHeight = LineHeight;
type index$5_TextAlign = TextAlign;
type index$5_TextProps = TextProps;
type index$5_WhiteSpace = WhiteSpace;
type index$5_WordBreak = WordBreak;
declare const index$5_alignments: typeof alignments;
declare const index$5_families: typeof families;
declare const index$5_leadings: typeof leadings;
declare const index$5_sizes: typeof sizes;
declare const index$5_spacings: typeof spacings;
declare const index$5_whiteSpaces: typeof whiteSpaces;
declare const index$5_wordBreaks: typeof wordBreaks;
declare namespace index$5 {
  export { type index$5_FontFamily as FontFamily, type index$5_FontSize as FontSize, type index$5_HeaderProps as HeaderProps, type index$5_LetterSpacing as LetterSpacing, type index$5_LineHeight as LineHeight, type index$5_TextAlign as TextAlign, type index$5_TextProps as TextProps, type index$5_WhiteSpace as WhiteSpace, type index$5_WordBreak as WordBreak, index$5_alignments as alignments, cssClass$2 as cssClass, index$5_families as families, index$5_leadings as leadings, index$5_sizes as sizes, index$5_spacings as spacings, index$5_whiteSpaces as whiteSpaces, index$5_wordBreaks as wordBreaks };
}

declare enum ToggleVariant {
    Default = "default",
    Outline = "outline"
}
declare enum ToggleSize {
    Default = "default",
    Sm = "sm",
    Lg = "lg"
}
declare const TOGGLE_VARIANTS: ToggleVariant[];
declare const TOGGLE_SIZES: ToggleSize[];
type VariantProps = VariantProps$1<typeof toggleVariants>;
type Variant = VariantProps["variant"];
type Size = VariantProps["size"];
declare const toggleVariants: tailwind_variants.TVReturnType<{
    variant: {
        default: string;
        outline: string;
    };
    size: {
        default: string;
        sm: string;
        lg: string;
    };
}, undefined, "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground", tailwind_variants_dist_config.TVConfig<{
    variant: {
        default: string;
        outline: string;
    };
    size: {
        default: string;
        sm: string;
        lg: string;
    };
}, {
    variant: {
        default: string;
        outline: string;
    };
    size: {
        default: string;
        sm: string;
        lg: string;
    };
}>, {
    variant: {
        default: string;
        outline: string;
    };
    size: {
        default: string;
        sm: string;
        lg: string;
    };
}, undefined, tailwind_variants.TVReturnType<{
    variant: {
        default: string;
        outline: string;
    };
    size: {
        default: string;
        sm: string;
        lg: string;
    };
}, undefined, "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground", tailwind_variants_dist_config.TVConfig<{
    variant: {
        default: string;
        outline: string;
    };
    size: {
        default: string;
        sm: string;
        lg: string;
    };
}, {
    variant: {
        default: string;
        outline: string;
    };
    size: {
        default: string;
        sm: string;
        lg: string;
    };
}>, unknown, unknown, undefined>>;
type ClassProps$1 = {
    variant: Variant;
    size: Size;
    className?: string | null | undefined;
};
declare function cssClass$1({ variant, size, className }: ClassProps$1): string;

type index$4_Size = Size;
declare const index$4_TOGGLE_SIZES: typeof TOGGLE_SIZES;
declare const index$4_TOGGLE_VARIANTS: typeof TOGGLE_VARIANTS;
type index$4_ToggleSize = ToggleSize;
declare const index$4_ToggleSize: typeof ToggleSize;
type index$4_ToggleVariant = ToggleVariant;
declare const index$4_ToggleVariant: typeof ToggleVariant;
type index$4_Variant = Variant;
type index$4_VariantProps = VariantProps;
declare const index$4_toggleVariants: typeof toggleVariants;
declare namespace index$4 {
  export { type index$4_Size as Size, index$4_TOGGLE_SIZES as TOGGLE_SIZES, index$4_TOGGLE_VARIANTS as TOGGLE_VARIANTS, index$4_ToggleSize as ToggleSize, index$4_ToggleVariant as ToggleVariant, type index$4_Variant as Variant, type index$4_VariantProps as VariantProps, cssClass$1 as cssClass, index$4_toggleVariants as toggleVariants };
}

declare function cssClass({ className }: {
    className?: string | null;
}): string;
type ClassProps = {
    ctx: VariantProps;
    variant: Variant;
    size: Size;
    className?: string | null | undefined;
};
declare function itemCssClass({ ctx, variant, size, className }: ClassProps): string;

declare const index$3_cssClass: typeof cssClass;
declare const index$3_itemCssClass: typeof itemCssClass;
declare namespace index$3 {
  export { index$3_cssClass as cssClass, index$3_itemCssClass as itemCssClass };
}

type Props = {
    className?: string | null | undefined;
};
declare function containerCssClass({ className }: Props): string;
declare function tableCssClass({ className }: Props): string;
declare function tableRowCssClass({ className }: Props): string;
declare function tableHeaderCssClass({ className }: Props): string;
declare function tableHeadCssClass({ className }: Props): string;
declare function tableFooterCssClass({ className }: Props): string;
declare function tableCellCssClass({ className }: Props): string;
declare function tableCaptionCssClass({ className }: Props): string;
declare function tableBodyCssClass({ className }: Props): string;
declare const _default: {
    container: {
        cssClass: typeof containerCssClass;
    };
    root: {
        cssClass: typeof tableCssClass;
    };
    row: {
        cssClass: typeof tableRowCssClass;
    };
    header: {
        cssClass: typeof tableHeaderCssClass;
    };
    head: {
        cssClass: typeof tableHeadCssClass;
    };
    footer: {
        cssClass: typeof tableFooterCssClass;
    };
    cell: {
        cssClass: typeof tableCellCssClass;
    };
    caption: {
        cssClass: typeof tableCaptionCssClass;
    };
    body: {
        cssClass: typeof tableBodyCssClass;
    };
};

declare namespace index$2 {
  export { index$z as alert, index$y as button, index$l as calendar, index$k as card, index$j as chart, index$i as column, index$h as datePicker, index$g as input, index$f as label, index$e as link, index$d as popover, index$c as row, index$6 as select, _default as table, index$5 as text, index$4 as toggle, index$3 as toggleGroup };
}

declare function cn(...inputs: ClassValue[]): string;
declare const isBrowser: boolean;

declare const index$1_cn: typeof cn;
declare const index$1_isBrowser: typeof isBrowser;
declare namespace index$1 {
  export { index$1_cn as cn, index$1_isBrowser as isBrowser };
}

declare namespace index {
  export { index$A as skins, index$2 as ui, index$1 as utils };
}

type AnyObject = Record<string, unknown>;
type LatitudeApiConfig = {
    host?: string;
    cors?: RequestMode;
    customHeaders?: Record<string, string>;
};
declare class ApiError extends Error {
    status: number;
    constructor(message: string, status: number);
}
declare class LatitudeApi {
    private host?;
    private cors;
    private customHeaders;
    configure({ host, cors, customHeaders }: LatitudeApiConfig): void;
    get<T>(urlStr: string, params?: AnyObject, additionalHeaders?: Record<string, string>): Promise<T>;
    private buildUrl;
    private get safeHost();
    private buildHeaders;
    private request;
    private handleResponse;
}
declare const api: LatitudeApi;

declare const FORCE_REFETCH_PARAMETER = "__force";
type QueryRequest = {
    queryPath: string;
    params?: Record<string, unknown>;
};
declare const createQueryKey: (queryPath: string, params: Record<string, unknown>) => string;
interface QueryResultState {
    isLoading: boolean;
    data?: QueryResult | null;
    error?: Error | null;
}
interface StoreState {
    queries: Record<string, QueryResultState>;
    fetch: (request: QueryRequest) => Promise<void>;
    forceRefetch: (request: QueryRequest) => Promise<void>;
}
declare const store: zustand_vanilla.StoreApi<StoreState>;
declare const useFetchQuery: (queryPath: string, params?: Record<string, unknown>) => () => void;
declare const useRunQuery: (queryPath: string, params: Record<string, unknown>) => void;

type ExtendsUnion<T, U extends T> = U;

type CartesianChartProps = Props$2;
type PieChartProps = PieChartProps$1;
type FunnelChartProps = FunnelChartProps$1;
type ScatterChartProps = ScatterChartProps$1;

export { ApiError, type BackgroundColor, type CartesianChartProps, type Dataset, type ExtendsUnion, FORCE_REFETCH_PARAMETER, type FontFamily, type FontSize, type FontWeight, type FunnelChartProps, type LetterSpacing, type LineHeight, type PieChartProps, type QueryResultState, type ScatterChartProps, type TextAlign, type TextColor, type TextProps, type WhiteSpace, type WordBreak, type ZIndex, api, colors, createQueryKey, store, index as theme, useFetchQuery, useRunQuery, weights, zIndexes };
