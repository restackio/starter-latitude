import { clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';
import { tv } from 'tailwind-variants';
import { isNaN as isNaN$1, isString, flatten, compact } from 'lodash-es';
import { format } from 'date-fns/format';
import { format as format$1 } from '@latitude-data/custom_types';
import { createStore } from 'zustand/vanilla';
import QueryResult from '@latitude-data/query_result';

var rose = {
    light: {
        background: '0 0% 100%',
        foreground: '240 10% 3.9%',
        card: '0 0% 100%',
        'card-foreground': '240 10% 3.9%',
        popover: '0 0% 100%',
        'popover-foreground': '240 10% 3.9%',
        primary: '346.8 77.2% 49.8%',
        'primary-foreground': '355.7 100% 97.3%',
        secondary: '240 4.8% 95.9%',
        'secondary-foreground': '240 5.9% 10%',
        muted: '240 4.8% 95.9%',
        'muted-foreground': '240 3.8% 46.1%',
        accent: '240 4.8% 95.9%',
        'accent-foreground': '240 5.9% 10%',
        destructive: '0 72.22% 50.59%',
        'destructive-foreground': '0 0% 98%',
        border: '240 5.9% 90%',
        input: '240 5.9% 90%',
        ring: '346.8 77.2% 49.8%',
        radius: '0.5rem',
    },
    dark: {
        background: '20 14.3% 4.1%',
        foreground: '0 0% 95%',
        popover: '0 0% 9%',
        'popover-foreground': '0 0% 95%',
        card: '24 9.8% 10%',
        'card-foreground': '0 0% 95%',
        primary: '346.8 77.2% 49.8%',
        'primary-foreground': '355.7 100% 97.3%',
        secondary: '240 3.7% 15.9%',
        'secondary-foreground': '0 0% 98%',
        muted: '0 0% 15%',
        'muted-foreground': '240 5% 64.9%',
        accent: '12 6.5% 15.1%',
        'accent-foreground': '0 0% 98%',
        destructive: '0 62.8% 30.6%',
        'destructive-foreground': '0 85.7% 97.3%',
        border: '240 3.7% 15.9%',
        input: '240 3.7% 15.9%',
        ring: '346.8 77.2% 49.8%',
    },
};

var orange = {
    light: {
        background: '0 0% 100%',
        foreground: '20 14.3% 4.1%',
        card: '0 0% 100%',
        'card-foreground': '20 14.3% 4.1%',
        popover: '0 0% 100%',
        'popover-foreground': '20 14.3% 4.1%',
        primary: '24.6 95% 53.1%',
        'primary-foreground': '60 9.1% 97.8%',
        secondary: '60 4.8% 95.9%',
        'secondary-foreground': '24 9.8% 10%',
        muted: '60 4.8% 95.9%',
        'muted-foreground': '25 5.3% 44.7%',
        accent: '60 4.8% 95.9%',
        'accent-foreground': '24 9.8% 10%',
        destructive: '0 72.22% 50.59%',
        'destructive-foreground': '60 9.1% 97.8%',
        border: '20 5.9% 90%',
        input: '20 5.9% 90%',
        ring: '24.6 95% 53.1%',
        radius: '0.5rem',
    },
    dark: {
        background: '20 14.3% 4.1%',
        foreground: '60 9.1% 97.8%',
        card: '20 14.3% 4.1%',
        'card-foreground': '60 9.1% 97.8%',
        popover: '20 14.3% 4.1%',
        'popover-foreground': '60 9.1% 97.8%',
        primary: '20.5 90.2% 48.2%',
        'primary-foreground': '60 9.1% 97.8%',
        secondary: '12 6.5% 15.1%',
        'secondary-foreground': '60 9.1% 97.8%',
        muted: '12 6.5% 15.1%',
        'muted-foreground': '24 5.4% 63.9%',
        accent: '12 6.5% 15.1%',
        'accent-foreground': '60 9.1% 97.8%',
        destructive: '0 72.2% 50.6%',
        'destructive-foreground': '60 9.1% 97.8%',
        border: '12 6.5% 15.1%',
        input: '12 6.5% 15.1%',
        ring: '20.5 90.2% 48.2%',
    },
};

var green = {
    light: {
        background: '0 0% 100%',
        foreground: '240 10% 3.9%',
        card: '0 0% 100%',
        'card-foreground': '240 10% 3.9%',
        popover: '0 0% 100%',
        'popover-foreground': '240 10% 3.9%',
        primary: '142.1 76.2% 36.3%',
        'primary-foreground': '355.7 100% 97.3%',
        secondary: '240 4.8% 95.9%',
        'secondary-foreground': '240 5.9% 10%',
        muted: '240 4.8% 95.9%',
        'muted-foreground': '240 3.8% 46.1%',
        accent: '240 4.8% 95.9%',
        'accent-foreground': '240 5.9% 10%',
        destructive: '0 72.22% 50.59%',
        'destructive-foreground': '0 0% 98%',
        border: '240 5.9% 90%',
        input: '240 5.9% 90%',
        ring: '142.1 76.2% 36.3%',
        radius: '0.5rem',
    },
    dark: {
        background: '20 14.3% 4.1%',
        foreground: '0 0% 95%',
        popover: '0 0% 9%',
        'popover-foreground': '0 0% 95%',
        card: '24 9.8% 10%',
        'card-foreground': '0 0% 95%',
        primary: '142.1 70.6% 45.3%',
        'primary-foreground': '144.9 80.4% 10%',
        secondary: '240 3.7% 15.9%',
        'secondary-foreground': '0 0% 98%',
        muted: '0 0% 15%',
        'muted-foreground': '240 5% 64.9%',
        accent: '12 6.5% 15.1%',
        'accent-foreground': '0 0% 98%',
        destructive: '0 62.8% 30.6%',
        'destructive-foreground': '0 85.7% 97.3%',
        border: '240 3.7% 15.9%',
        input: '240 3.7% 15.9%',
        ring: '142.4 71.8% 29.2%',
    },
};

var latitude$1 = {
    light: {
        background: '0 0% 100%',
        foreground: '222.2 84% 4.9%',
        card: '0 0% 100%',
        'card-foreground': '222.2 84% 4.9%',
        popover: '0 0% 100%',
        'popover-foreground': '222.2 84% 4.9%',
        primary: '221.2 83.2% 53.3%',
        'primary-foreground': '210 40% 98%',
        secondary: '210 40% 96.1%',
        'secondary-foreground': '222.2 47.4% 11.2%',
        muted: '210 40% 96.1%',
        'muted-foreground': '215.4 16.3% 46.9%',
        accent: '210 40% 96.1%',
        'accent-foreground': '222.2 47.4% 11.2%',
        destructive: '0 72.22% 50.59%',
        'destructive-foreground': '210 40% 98%',
        border: '214.3 31.8% 91.4%',
        input: '214.3 31.8% 91.4%',
        ring: '221.2 83.2% 53.3%',
        radius: '0.5rem',
    },
    dark: {
        background: '222.2 84% 4.9%',
        foreground: '210 40% 98%',
        card: '222.2 84% 4.9%',
        'card-foreground': '210 40% 98%',
        popover: '222.2 84% 4.9%',
        'popover-foreground': '210 40% 98%',
        primary: '217.2 91.2% 59.8%',
        'primary-foreground': '222.2 47.4% 11.2%',
        secondary: '217.2 32.6% 17.5%',
        'secondary-foreground': '210 40% 98%',
        muted: '217.2 32.6% 17.5%',
        'muted-foreground': '215 20.2% 65.1%',
        accent: '217.2 32.6% 17.5%',
        'accent-foreground': '210 40% 98%',
        destructive: '0 62.8% 30.6%',
        'destructive-foreground': '210 40% 98%',
        border: '217.2 32.6% 17.5%',
        input: '217.2 32.6% 17.5%',
        ring: '224.3 76.3% 48%',
    },
};

var LATITUDE_PREFIX = 'lat';
function buildCssVariables(theme) {
    var light = theme.cssVars.light;
    var dark = theme.cssVars.dark;
    var cssVariables = ':root {\n';
    // Iterate over light theme properties
    for (var _i = 0, _a = Object.entries(light); _i < _a.length; _i++) {
        var _b = _a[_i], key = _b[0], value = _b[1];
        cssVariables += "  --".concat(LATITUDE_PREFIX, "-").concat(key, ": ").concat(value, ";\n");
    }
    cssVariables += '}\n.dark {\n';
    // Iterate over dark theme properties
    for (var _c = 0, _d = Object.entries(dark); _c < _d.length; _c++) {
        var _e = _d[_c], key = _e[0], value = _e[1];
        cssVariables += "  --".concat(LATITUDE_PREFIX, "-").concat(key, ": ").concat(value, ";\n");
    }
    cssVariables += '}';
    return cssVariables;
}

// Default Skins
var themes = [
    { name: 'latitude', label: 'Latitude', cssVars: latitude$1 },
    { name: 'rose', label: 'Rose', cssVars: rose },
    { name: 'green', label: 'Green', cssVars: green },
    { name: 'orange', label: 'Orange', cssVars: orange },
];
var defaultTheme = themes[0];

var index$B = /*#__PURE__*/Object.freeze({
    __proto__: null,
    buildCssVariables: buildCssVariables,
    defaultTheme: defaultTheme,
    themes: themes
});

function cn() {
    var inputs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        inputs[_i] = arguments[_i];
    }
    return twMerge(clsx(inputs));
}
var isBrowser = typeof document !== "undefined";

var index$A = /*#__PURE__*/Object.freeze({
    __proto__: null,
    cn: cn,
    isBrowser: isBrowser
});

var colors = {
    backgrounds: {
        transparent: 'bg-transparent',
        primary: 'bg-primary',
        primary20: 'bg-primary/20',
        destructive: 'bg-destructive',
        destructive20: 'bg-destructive/20',
        destructiveForeground: 'bg-destructive-foreground',
        green100: 'bg-green-100',
        green500: 'bg-green-500',
        yellow50: 'bg-yellow-50',
        muted: 'bg-muted',
        mutedForeground: 'bg-muted-foreground'
    },
    textColors: {
        white: 'text-white',
        primary: 'text-primary',
        secondary: 'text-secondary',
        destructive: 'text-destructive',
        accent: 'text-accent',
        muted: 'text-muted',
        mutedForeground: 'text-muted-foreground',
        background: 'text-background',
        foreground: 'text-foreground',
        link: 'text-link',
        inherit: 'text-inherit',
        primaryForeground: 'text-primary-foreground',
        destructiveForeground: 'text-destructive-foreground',
        yellow900: 'text-yellow-900',
        green700: 'text-green-700',
    },
};

var TYPES = {
    muted: {
        normal: {
            background: 'muted',
            foreground: 'mutedForeground',
        },
        secondary: {
            background: 'mutedForeground',
            foreground: 'muted',
        },
    },
    primary: {
        normal: {
            background: 'primary',
            foreground: 'white',
        },
        secondary: {
            background: 'primary20',
            foreground: 'primary',
        },
    },
    alert: {
        normal: {
            background: 'yellow50',
            foreground: 'yellow900',
        },
        secondary: {
            background: 'yellow50',
            foreground: 'yellow900',
        },
    },
    destructive: {
        normal: {
            background: 'destructive',
            foreground: 'destructiveForeground',
        },
        secondary: {
            background: 'destructive20',
            foreground: 'destructive',
        },
    },
    green: {
        normal: {
            background: 'green500',
            foreground: 'white',
        },
        secondary: {
            background: 'green100',
            foreground: 'green700',
        },
    },
};
var useType = function (_a) {
    var type = _a.type, _b = _a.secondary, secondary = _b === void 0 ? false : _b;
    var mode = secondary ? 'secondary' : 'normal';
    var typeConfig = TYPES[type];
    return typeConfig[mode] || typeConfig.normal;
};

var ALERT_TYPES = {
    primary: 'primary',
    green: 'green',
    alert: 'alert',
    destructive: 'destructive',
    muted: 'muted',
};
function cssClass$t(_a) {
    var type = _a.type, className = _a.className, _b = _a.secondary, secondary = _b === void 0 ? false : _b, _c = _a.scrollable, scrollable = _c === void 0 ? false : _c;
    var _d = useType({ type: type, secondary: secondary }), foreground = _d.foreground, background = _d.background;
    var cssBgColor = colors.backgrounds[background];
    return {
        properties: { foreground: foreground },
        root: cn('flex flex-row justify-between ', ' py-2.5 px-4 rounded-lg gap-4', cssBgColor, className, {
            'items-start overflow-y-auto custom-scrollbar': scrollable,
            'items-center': !scrollable
        })
    };
}

var index$z = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ALERT_TYPES: ALERT_TYPES,
    cssClass: cssClass$t
});

var ButtonVariant;
(function (ButtonVariant) {
    ButtonVariant["Default"] = "default";
    ButtonVariant["Destructive"] = "destructive";
    ButtonVariant["Outline"] = "outline";
    ButtonVariant["Secondary"] = "secondary";
    ButtonVariant["Ghost"] = "ghost";
    ButtonVariant["Link"] = "link";
})(ButtonVariant || (ButtonVariant = {}));
var BUTTON_SIZE;
(function (BUTTON_SIZE) {
    BUTTON_SIZE["Default"] = "default";
    BUTTON_SIZE["Sm"] = "sm";
    BUTTON_SIZE["Lg"] = "lg";
    BUTTON_SIZE["Icon"] = "icon";
})(BUTTON_SIZE || (BUTTON_SIZE = {}));
var BUTTON_VARIANTS = Object.values(ButtonVariant);
var BUTTON_SIZES = Object.values(BUTTON_SIZE);
var buttonVariants = tv({
    base: 'inline-flex items-center justify-center rounded-md text-sm font-medium whitespace-nowrap transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50',
    variants: {
        variant: {
            default: 'bg-primary text-primary-foreground shadow hover:bg-primary/90',
            destructive: 'bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90',
            outline: 'border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground',
            secondary: 'bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80',
            ghost: 'hover:bg-accent hover:text-accent-foreground',
            link: 'text-primary underline-offset-4 hover:underline',
        },
        size: {
            default: 'h-9 px-4 py-2',
            sm: 'h-8 rounded-md px-3 text-xs',
            lg: 'h-10 rounded-md px-8',
            icon: 'h-9 w-9',
        },
    },
    defaultVariants: {
        variant: 'default',
        size: 'default',
    },
});
function cssClass$s(_a) {
    var variant = _a.variant, size = _a.size, className = _a.className;
    return cn(buttonVariants({ variant: variant, size: size, className: className }));
}

var index$y = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get BUTTON_SIZE () { return BUTTON_SIZE; },
    BUTTON_SIZES: BUTTON_SIZES,
    BUTTON_VARIANTS: BUTTON_VARIANTS,
    get ButtonVariant () { return ButtonVariant; },
    buttonVariants: buttonVariants,
    cssClass: cssClass$s
});

var zIndexes = {
    popover: 'z-50',
    selectContent: 'z-50',
    focusedCalendarCell: 'z-20',
};

function cssClass$r(_a) {
    var className = _a.className, _b = _a.isRangeCalendar, isRangeCalendar = _b === void 0 ? false : _b;
    return cn('relative p-0 text-center text-sm', "focus-within:relative focus-within:".concat(zIndexes.focusedCalendarCell), '[&:has([data-selected])]:bg-accent [&:has([data-selected][data-outside-month])]:bg-accent/50', {
        '[&:has([data-selected])]:rounded-md': !isRangeCalendar,
        'first:[&:has([data-selected])]:rounded-l-md last:[&:has([data-selected])]:rounded-r-md': isRangeCalendar,
        '[&:has([data-selected][data-selection-end])]:rounded-r-md [&:has([data-selected][data-selection-start])]:rounded-l-md': isRangeCalendar
    }, className);
}

var index$x = /*#__PURE__*/Object.freeze({
    __proto__: null,
    cssClass: cssClass$r
});

function cssClass$q(_a) {
    var className = _a.className, _b = _a.isRangeCalendar, isRangeCalendar = _b === void 0 ? false : _b;
    return cn(buttonVariants({ variant: "ghost" }), "h-8 w-8 p-0 font-normal", 
    // Today
    "[&[data-today]:not([data-selected])]:bg-accent [&[data-today]:not([data-selected])]:text-accent-foreground", {
        "data-[selected]:opacity-100": isRangeCalendar,
        // Selected (single)
        "data-[selected]:bg-primary data-[selected]:text-primary-foreground data-[selected]:opacity-100 data-[selected]:hover:bg-primary data-[selected]:hover:text-primary-foreground data-[selected]:focus:bg-primary data-[selected]:focus:text-primary-foreground": !isRangeCalendar,
        // Selection Start (range)
        "data-[selection-start]:bg-primary data-[selection-start]:text-primary-foreground data-[selection-start]:hover:bg-primary data-[selection-start]:hover:text-primary-foreground data-[selection-start]:focus:bg-primary data-[selection-start]:focus:text-primary-foreground": isRangeCalendar,
        // Selection End (range)
        "data-[selection-end]:bg-primary data-[selection-end]:text-primary-foreground data-[selection-end]:hover:bg-primary data-[selection-end]:hover:text-primary-foreground data-[selection-end]:focus:bg-primary data-[selection-end]:focus:text-primary-foreground": isRangeCalendar,
    }, 
    // Disabled
    "data-[disabled]:text-muted-foreground data-[disabled]:opacity-50", 
    // Unavailable
    "data-[unavailable]:text-destructive-foreground data-[unavailable]:line-through", 
    // Outside months
    "data-[outside-month]:pointer-events-none data-[outside-month]:text-muted-foreground data-[outside-month]:opacity-50 [&[data-outside-month][data-selected]]:bg-accent/50 [&[data-outside-month][data-selected]]:text-muted-foreground [&[data-outside-month][data-selected]]:opacity-30", className);
}

var index$w = /*#__PURE__*/Object.freeze({
    __proto__: null,
    cssClass: cssClass$q
});

function cssClass$p(_a) {
    var className = _a.className;
    return cn("w-full border-collapse space-y-1", className);
}

var index$v = /*#__PURE__*/Object.freeze({
    __proto__: null,
    cssClass: cssClass$p
});

function cssClass$o(_a) {
    var className = _a.className;
    return cn(className);
}

var index$u = /*#__PURE__*/Object.freeze({
    __proto__: null,
    cssClass: cssClass$o
});

function cssClass$n(_a) {
    var className = _a.className;
    return cn(className);
}

var index$t = /*#__PURE__*/Object.freeze({
    __proto__: null,
    cssClass: cssClass$n
});

function cssClass$m(_a) {
    var className = _a.className;
    return cn("flex", className);
}

var index$s = /*#__PURE__*/Object.freeze({
    __proto__: null,
    cssClass: cssClass$m
});

function cssClass$l(_a) {
    var className = _a.className;
    return cn("w-8 rounded-md text-[0.8rem] font-normal text-muted-foreground", className);
}

var index$r = /*#__PURE__*/Object.freeze({
    __proto__: null,
    cssClass: cssClass$l
});

function cssClass$k(_a) {
    var className = _a.className;
    return cn("relative flex w-full items-center justify-between pt-1", className);
}

var index$q = /*#__PURE__*/Object.freeze({
    __proto__: null,
    cssClass: cssClass$k
});

function cssClass$j(_a) {
    var className = _a.className;
    return cn("text-sm font-medium", className);
}

var index$p = /*#__PURE__*/Object.freeze({
    __proto__: null,
    cssClass: cssClass$j
});

function cssClass$i(_a) {
    var className = _a.className;
    return cn("mt-4 flex flex-col space-y-4 sm:flex-row sm:space-x-4 sm:space-y-0", className);
}

var index$o = /*#__PURE__*/Object.freeze({
    __proto__: null,
    cssClass: cssClass$i
});

function cssClass$h(_a) {
    var className = _a.className;
    return cn(buttonVariants({ variant: "outline" }), "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100", className);
}
var ICON_CSS_CLASS$2 = "h-4 w-4";

var index$n = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ICON_CSS_CLASS: ICON_CSS_CLASS$2,
    cssClass: cssClass$h
});

function cssClass$g(_a) {
    var className = _a.className;
    return cn(buttonVariants({ variant: "outline" }), "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100", className);
}
var ICON_CSS_CLASS$1 = "h-4 w-4";

var index$m = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ICON_CSS_CLASS: ICON_CSS_CLASS$1,
    cssClass: cssClass$g
});

function cssClass$f(_a) {
    var className = _a.className;
    return cn("p-3", className);
}
var HEADER_ROW_CSS_CLASS = "flex";
var BODY_ROW_CSS_CLASS = "mt-2 w-full";

var index$l = /*#__PURE__*/Object.freeze({
    __proto__: null,
    BODY_ROW_CSS_CLASS: BODY_ROW_CSS_CLASS,
    HEADER_ROW_CSS_CLASS: HEADER_ROW_CSS_CLASS,
    cell: index$x,
    cssClass: cssClass$f,
    day: index$w,
    grid: index$v,
    gridBody: index$u,
    gridHead: index$t,
    gridRow: index$s,
    headCell: index$r,
    header: index$q,
    heading: index$p,
    months: index$o,
    nextButton: index$n,
    prevButton: index$m
});

var NORMAL_PADDING = 'p-6';
var cardRootVariants = tv({
    base: 'rounded-xl bg-card text-card-foreground ',
    variants: {
        type: {
            normal: 'border shadow',
            invisible: ''
        },
    }
});
var cardHeaderVariants = tv({
    base: 'flex flex-col space-y-1.5',
    variants: {
        type: {
            normal: NORMAL_PADDING,
            invisible: 'pb-6'
        }
    }
});
var cardContentVariants = tv({
    base: '',
    variants: {
        type: {
            normal: 'p-6 pt-0',
            invisible: ''
        }
    }
});
function rootCssClass(_a) {
    var _b = _a.type, type = _b === void 0 ? 'normal' : _b, className = _a.className;
    return cn(cardRootVariants({ type: type }), className);
}
function headerCssClass(_a) {
    var _b = _a.type, type = _b === void 0 ? 'normal' : _b, className = _a.className;
    return cn(cardHeaderVariants({ type: type }), className);
}
function titleCssClass(_a) {
    var className = _a.className;
    return cn('font-semibold leading-none tracking-tight', className);
}
function descriptionCssClass(_a) {
    var className = _a.className;
    return cn('text-sm text-muted-foreground', className);
}
function contentCssClass(_a) {
    var _b = _a.type, type = _b === void 0 ? 'normal' : _b, className = _a.className;
    return cn(cardContentVariants({ type: type }), className);
}
function footerCssClass(_a) {
    var className = _a.className;
    return cn('text-sm text-muted-foreground', className);
}

var index$k = /*#__PURE__*/Object.freeze({
    __proto__: null,
    contentCssClass: contentCssClass,
    descriptionCssClass: descriptionCssClass,
    footerCssClass: footerCssClass,
    headerCssClass: headerCssClass,
    rootCssClass: rootCssClass,
    titleCssClass: titleCssClass
});

var colorPalette = [
    '#26a2fa',
    '#fd647a',
    '#fed772',
    '#78dcd3',
    '#975194',
    '#fa7f38',
    '#32ae64',
    '#5254ab',
    '#a7dcd2',
    '#8f7dff',
    '#fd5335',
    '#fcb3aa',
];
var latitude = {
    color: colorPalette,
    seriesCnt: '9',
    backgroundColor: 'rgba(252,252,252,0)',
    titleColor: '#071324',
    subtitleColor: '#63676d',
    textColorShow: false,
    textColor: '#333',
    markTextColor: '#ffffff',
    borderColor: '#ffffff',
    borderWidth: '2',
    visualMapColor: [
        '#003085',
        '#0046c6',
        '#205dd1',
        '#3a73db',
        '#5389e3',
        '#6d9fea',
        '#89b4f0',
        '#a6c9f5',
        '#c4defa',
        '#e5f2ff',
    ],
    legendTextColor: '#63676d',
    kColor: '#096db1',
    kColor0: 'transparent',
    kBorderColor: '#32b3ea',
    kBorderColor0: '#e8326c',
    kBorderWidth: '2',
    lineWidth: '2',
    symbolSize: '8',
    symbol: 'emptyCircle',
    symbolBorderWidth: '2',
    lineSmooth: false,
    graphLineWidth: '2',
    graphLineColor: '#d3d6da',
    mapLabelColor: '#ffffff',
    mapLabelColorE: '#3fb1e3',
    mapBorderColor: '#aaaaaa',
    mapBorderColorE: '#3fb1e3',
    mapBorderWidth: 0.5,
    mapBorderWidthE: 1,
    mapAreaColor: '#eeeeee',
    mapAreaColorE: 'rgba(63,177,227,0.25)',
    axes: [
        {
            type: 'all',
            name: 'All',
            axisLineShow: true,
            axisLineColor: '#d3d6da',
            axisTickShow: false,
            axisTickColor: '#333',
            axisLabelShow: true,
            axisLabelColor: '#a2a6ac',
            splitLineShow: true,
            splitLineColor: ['#eff0f1'],
            splitAreaShow: false,
            splitAreaColor: ['rgba(250,250,250,0.05)', 'rgba(200,200,200,0.02)'],
        },
        {
            type: 'category',
            name: 'Category',
            axisLineShow: true,
            axisLineColor: '#333',
            axisTickShow: true,
            axisTickColor: '#333',
            axisLabelShow: true,
            axisLabelColor: '#333',
            splitLineShow: false,
            splitLineColor: ['#ccc'],
            splitAreaShow: false,
            splitAreaColor: ['rgba(250,250,250,0.3)', 'rgba(200,200,200,0.3)'],
        },
        {
            type: 'value',
            name: 'Value',
            axisLineShow: true,
            axisLineColor: '#333',
            axisTickShow: true,
            axisTickColor: '#333',
            axisLabelShow: true,
            axisLabelColor: '#333',
            splitLineShow: true,
            splitLineColor: ['#ccc'],
            splitAreaShow: false,
            splitAreaColor: ['rgba(250,250,250,0.3)', 'rgba(200,200,200,0.3)'],
        },
        {
            type: 'log',
            name: 'Log',
            axisLineShow: true,
            axisLineColor: '#333',
            axisTickShow: true,
            axisTickColor: '#333',
            axisLabelShow: true,
            axisLabelColor: '#333',
            splitLineShow: true,
            splitLineColor: ['#ccc'],
            splitAreaShow: false,
            splitAreaColor: ['rgba(250,250,250,0.3)', 'rgba(200,200,200,0.3)'],
        },
        {
            type: 'time',
            name: 'Time',
            axisLineShow: true,
            axisLineColor: '#333',
            axisTickShow: true,
            axisTickColor: '#333',
            axisLabelShow: true,
            axisLabelColor: '#333',
            splitLineShow: true,
            splitLineColor: ['#ccc'],
            splitAreaShow: false,
            splitAreaColor: ['rgba(250,250,250,0.3)', 'rgba(200,200,200,0.3)'],
        },
    ],
    axisSeperateSetting: false,
    toolboxColor: '#a2a6ac',
    toolboxEmphasisColor: '#63676d',
    tooltipAxisColor: '#d3d6da',
    tooltipAxisWidth: '1',
    timelineLineColor: '#626c91',
    timelineLineWidth: 1,
    timelineItemColor: '#63676d',
    timelineItemColorE: '#63676d',
    timelineCheckColor: '#ffffff',
    timelineCheckBorderColor: '#0080ff',
    timelineItemBorderWidth: 1,
    timelineControlColor: '#626c91',
    timelineControlBorderColor: '#626c91',
    timelineControlBorderWidth: 0.5,
    timelineLabelColor: '#626c91',
    datazoomBackgroundColor: 'rgba(255,255,255,0)',
    datazoomDataColor: 'rgba(222,222,222,1)',
    datazoomFillColor: 'rgba(114,230,212,0.25)',
    datazoomHandleColor: '#cccccc',
    datazoomHandleWidth: '100',
    datazoomLabelColor: '#999999',
};

var ChartTheme;
(function (ChartTheme) {
    ChartTheme["latitude"] = "latitude";
})(ChartTheme || (ChartTheme = {}));
var THEMES = {
    latitude: latitude,
};

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

var CARTESIAN_CHART_TYPES = {
    line: 'line',
    bar: 'bar',
    area: 'area',
    scatter: 'scatter',
};
__assign(__assign({}, CARTESIAN_CHART_TYPES), { pie: 'pie' });
var AxisType;
(function (AxisType) {
    AxisType["category"] = "category";
    AxisType["value"] = "value";
    AxisType["time"] = "time";
    AxisType["log"] = "log";
})(AxisType || (AxisType = {}));

var AxisAlign;
(function (AxisAlign) {
    AxisAlign["start"] = "start";
    AxisAlign["end"] = "end";
})(AxisAlign || (AxisAlign = {}));

function calculatePercentage(row) {
    var total = row.reduce(function (sum, value) {
        var maybeNum = Number(value);
        if (isNaN$1(maybeNum))
            return sum;
        return Number(sum) + maybeNum;
    }, 0);
    if (total === 0) {
        return row.map(function (val) {
            var maybeNum = Number(val);
            if (isNaN$1(maybeNum))
                return val;
            return 0;
        });
    }
    return row.map(function (value) {
        var maybeNum = Number(value);
        if (isNaN$1(maybeNum))
            return value;
        return maybeNum / total;
    });
}
function convertToNumberMaybe(item) {
    return isNaN$1(Number(item)) ? item : Number(item);
}
function normalizeValues(source, normalizeValues) {
    if (normalizeValues === void 0) { normalizeValues = false; }
    if (!normalizeValues)
        return source.map(function (row) { return row.map(convertToNumberMaybe); });
    return source.map(calculatePercentage);
}
function completeSortItem(sort) {
    if (typeof sort === 'string')
        return { dimension: sort, order: 'asc' };
    return {
        dimension: sort.column,
        order: sort.order,
        parser: sort.parser,
        incomparable: sort.incomparable
    };
}
function parseSort(sort) {
    if (!sort)
        return [];
    if (Array.isArray(sort))
        return sort.map(completeSortItem);
    return [completeSortItem(sort)];
}
function getDataset(props) {
    var _a = props.dataset, fields = _a.fields, source = _a.source;
    var sort = parseSort(props.sort);
    var dataset = {
        dimensions: fields,
        source: normalizeValues(source, props.normalizeValues),
    };
    if (!sort.length)
        return { datasets: [dataset], datasetIndex: 0 };
    var datasets = [
        dataset,
        { transform: { type: 'sort', config: sort } }
    ];
    return {
        datasets: datasets,
        datasetIndex: datasets.length - 1,
    };
}

var FONT_MAMILY = {
    sans: 'Inter var,ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,"Apple Color Emoji","Segoe UI Emoji",Segoe UI Symbol,"Noto Color Emoji"',
    mono: 'ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace',
};
var FONT = {
    fontFamily: FONT_MAMILY,
    fontWeight: {
        normal: 400,
        semibold: 600,
    },
    sizes: {
        h3: {
            fontSize: 20,
            fontWeight: 400,
            lineHeight: 32,
        },
        h5: {
            fontSize: 14,
            fontWeight: 400,
            lineHeight: 20,
        },
        h6: {
            fontSize: 12,
            fontWeight: 400,
            lineHeight: 16,
        },
    },
};
var COLORS = {
    gray1000: '#071324',
    gray800: '#63676D',
    gray600: '#A2A6AC',
    gray200: '#EFF0F1',
};
var SPACES = {
    s20: 80,
    s16: 64,
    s14: 56,
    s12: 48,
    s10: 40,
    s9: 36,
    s8: 32,
    s7: 28,
    s6: 24,
    s5: 20,
    s4: 16,
    s3: 12,
    s2: 8,
    s1: 1,
};

function setDataZoom(_a) {
    var _b = _a.showZoom, showZoom = _b === void 0 ? false : _b, _c = _a.swapAxis, swapAxis = _c === void 0 ? false : _c;
    if (!showZoom)
        return [];
    var sliderDataZoom = {
        type: 'slider',
        show: true,
        top: swapAxis ? SPACES.s10 : 'auto',
        bottom: SPACES.s5,
        left: swapAxis ? 'auto' : SPACES.s16,
        right: swapAxis ? SPACES.s4 : SPACES.s16,
    };
    return [
        __assign(__assign({}, sliderDataZoom), (swapAxis ? { xAxisIndex: [0] } : { yAxisIndex: [0] })),
    ];
}

function setLegend(_a) {
    var show = _a.show, _b = _a.left, left = _b === void 0 ? 0 : _b;
    return {
        type: 'scroll',
        show: show,
        align: 'left',
        left: left,
    };
}

var setGrid = function (_a) {
    var showLegend = _a.showLegend, showZoom = _a.showZoom, swapAxis = _a.swapAxis;
    return {
        containLabel: true,
        left: SPACES.s12,
        right: showZoom && swapAxis ? SPACES.s16 : SPACES.s8,
        top: showLegend ? SPACES.s14 : SPACES.s12,
        bottom: showZoom && !swapAxis ? SPACES.s20 : SPACES.s8,
    };
};

function numericToNumber(val) {
    var valFloat = parseFloat(val);
    return valFloat == val && // eslint-disable-line eqeqeq
        (valFloat !== 0 || !isString(val) || val.indexOf('x') <= 0) // For case ' 0x0 '.
        ? valFloat
        : NaN;
}
function isNumeric(val) {
    return !isNaN(numericToNumber(val));
}
function addCommas(x) {
    if (!isNumeric(x)) {
        return isString(x) ? x : '-';
    }
    var number = Math.trunc(Number(x));
    var parts = (number + '').split('.');
    if (!parts[0])
        return String(x);
    return (parts[0].replace(/(\d{1,3})(?=(?:\d{3})+(?!\d))/g, '$1,') +
        (parts.length > 1 ? '.' + parts[1] : ''));
}

var DEFAULT_LINE_LABEL_OPTIONS = {
    position: 'top',
    show: false,
};
function setLineChartStyle(_a) {
    var serie = _a.serie, serieIndex = _a.serieIndex, config = _a.config;
    return __assign(__assign({}, serie), { showSymbol: !!config.showDots, connectNulls: true, label: __assign(__assign({}, DEFAULT_LINE_LABEL_OPTIONS), { formatter: "{@".concat(serieIndex, "}"), show: config.showValues }) });
}

var MAX_BUBBLE_SIZE = 40;
function setScatterStyle(_a) {
    var _b, _c;
    var serie = _a.serie, chartType = _a.chartType, fields = _a.fields, source = _a.source, config = _a.config;
    var column = (_b = config.scatterConfig) === null || _b === void 0 ? void 0 : _b.column;
    var style = (_c = config.scatterConfig) === null || _c === void 0 ? void 0 : _c.style;
    if (chartType !== 'scatter' && !column)
        return serie;
    var columnIndex = fields.findIndex(function (f) { return f === column; });
    var symbolSize = function (_d) { return MAX_BUBBLE_SIZE / 2; };
    if (columnIndex !== -1) {
        var maxValueSource_1 = Math.max.apply(Math, source.map(function (row) { return Number(row[columnIndex]); }));
        symbolSize = function (data) {
            if (isNaN(maxValueSource_1))
                return MAX_BUBBLE_SIZE / 2;
            return ((parseFloat(String(data[columnIndex])) / maxValueSource_1) *
                MAX_BUBBLE_SIZE);
        };
    }
    return __assign(__assign({}, serie), { symbol: style, symbolSize: symbolSize });
}

function setSerie(_a) {
    var _b;
    var fields = _a.fields, serieColumn = _a.serieColumn, serieDisplayName = _a.serieDisplayName, chartType = _a.chartType, swapAxis = _a.swapAxis, axisIndex = _a.axisIndex, dimension = _a.dimension, source = _a.source, config = _a.config, datasetIndex = _a.datasetIndex;
    var serieIndex = fields.findIndex(function (f) { return f === serieColumn; });
    var isArea = chartType === 'area';
    var serie = (_b = {
            name: serieDisplayName || serieColumn,
            type: isArea ? 'line' : chartType,
            areaStyle: { opacity: isArea ? 0.4 : 0 }
        },
        _b[swapAxis ? 'yAxisIndex' : 'xAxisIndex'] = axisIndex,
        _b.encode = swapAxis
            ? { y: dimension.name, x: serieColumn }
            : { x: dimension.name, y: serieColumn },
        _b.datasetIndex = datasetIndex,
        _b);
    serie = setLineChartStyle({ serie: serie, serieIndex: serieIndex, config: config });
    serie = setScatterStyle({
        serie: serie,
        chartType: chartType,
        fields: fields,
        source: source,
        config: config,
    });
    return {
        serie: serie,
        serieIndexInSource: serieIndex,
    };
}

function findLongest(list) {
    return list.reduce(function (longest, value) {
        var longestLength = (longest === null || longest === void 0 ? void 0 : longest.length) || 0;
        var valueLength = (value === null || value === void 0 ? void 0 : value.length) || 0;
        if (longestLength > valueLength)
            return longest;
        return value;
    }, '');
}
function findLongestValue(source, sourceIndex) {
    return findLongest(source
        .filter(function (row) { return !!row[sourceIndex]; })
        .map(function (row) { return String(row[sourceIndex]); }));
}
function transformCartesiansSeries(_a) {
    var swapAxis = _a.swapAxis, yAxis = _a.yAxis, xColumns = _a.xColumns, yColumns = _a.yColumns, dataset = _a.dataset, hiddenSeries = _a.hiddenSeries, config = _a.config, datasetIndex = _a.datasetIndex;
    var fields = dataset.fields;
    var dimension = xColumns[0];
    // At least 1 dimension serie to plot the chart
    if (!dimension) {
        return {
            series: [],
            axisMetadata: {},
        };
    }
    var source = dataset.source;
    var axisMetadata = {};
    var series = flatten(yAxis.map(function (axis, axisIndex) {
        var _a;
        var stackKey = axis.stack
            ? "".concat(swapAxis ? 'axis_y' : 'axis_x', "_").concat((_a = axis.axisAlign) !== null && _a !== void 0 ? _a : AxisAlign.start)
            : null;
        axisMetadata[axisIndex] = { longestValue: '', seriesNames: [] };
        var measurements = yColumns.filter(function (column) { return column.axisIndex === axisIndex; });
        return compact(measurements.map(function (measurement) {
            var serieColumn = measurement.name;
            var displayName = measurement.displayName;
            var seriesName = displayName ? displayName : serieColumn;
            var serieData = setSerie({
                fields: fields,
                serieColumn: serieColumn,
                serieDisplayName: displayName,
                chartType: measurement.chartType,
                dimension: dimension,
                swapAxis: swapAxis,
                axisIndex: axisIndex,
                datasetIndex: datasetIndex,
                source: source,
                config: config,
            });
            var serie = serieData.serie;
            var isHidden = hiddenSeries.includes(seriesName);
            var longestValue = isHidden
                ? ''
                : findLongestValue(source, serieData.serieIndexInSource);
            if (stackKey) {
                serie = __assign(__assign({}, serie), { stack: stackKey });
            }
            var meta = axisMetadata[axisIndex];
            if (!meta)
                return serie;
            meta.longestValue = findLongest([meta.longestValue, longestValue]);
            if (!isHidden) {
                meta.seriesNames.push(seriesName);
            }
            axisMetadata[axisIndex] = meta;
            return serie;
        }));
    }));
    return {
        series: series,
        axisMetadata: axisMetadata,
    };
}

var POSITIONS = {
    y: { start: 'left', end: 'right' },
    x: { start: 'bottom', end: 'top' },
};
var DEFAULT_TYPE = {
    x: AxisType.category,
    y: AxisType.value,
};
var CASCADING_TIME_FORMATS = {
    year: '{yyyy}',
    month: '{MMM}',
    day: '{ee} {d}',
    hour: '{HH}:{mm}',
    minute: '{HH}:{mm}',
    second: '{HH}:{mm}:{ss}',
    millisecond: '{hh}:{mm}:{ss} {SSS}',
    none: '{yyyy}-{MM}-{dd} {hh}:{mm}:{ss} {SSS}',
};
var formatTimestamp = function (params) {
    return format(params.value, 'yyyy-MM-dd');
};
var AXIS_NAME_STYLES = {
    fontFamily: FONT.fontFamily.sans,
    color: COLORS.gray800,
    fontSize: FONT.sizes.h5.fontSize,
    lineHeight: FONT.sizes.h5.lineHeight,
    fontWeight: FONT.fontWeight.semibold,
};
var AXIS_LABEL_NAME_STYLES = {
    fontFamily: FONT.fontFamily.sans,
    color: COLORS.gray600,
    fontSize: FONT.sizes.h6.fontSize,
    lineHeight: FONT.sizes.h6.lineHeight,
    fontWeight: FONT.sizes.h6.fontWeight,
};
function getLongestDimensionLabel(_a) {
    var dataset = _a.dataset, serie = _a.serie;
    var fields = dataset.fields, source = dataset.source;
    var column = serie.name;
    var colIndex = fields.findIndex(function (field) { return field === column; });
    return findLongestValue(source, colIndex);
}
/**
 * Dynamic width calculation of axis labels based on longest value
 * Not possible in Echarts by default. Issue here:
 * https://github.com/apache/echarts/issues/12415
 *
 * Copied from here:
 * https://github.com/lightdash/lightdash/pull/2730
 */
var calculateDimensionsText = function (textObject) {
    if (!textObject)
        return { width: 0, height: 0 };
    var doc = globalThis.document;
    if (!doc)
        return { width: 0, height: 0 };
    var span = doc.createElement('span');
    doc.body.appendChild(span);
    span.style.height = 'auto';
    span.style.width = 'auto';
    span.style.font = AXIS_NAME_STYLES.fontFamily;
    span.style.fontSize = "".concat(textObject.fontSize, "px");
    span.style.top = '0px';
    span.style.position = 'absolute';
    span.style.whiteSpace = 'no-wrap';
    span.innerHTML = textObject.text;
    var width = Math.ceil(span.clientWidth);
    var height = Math.ceil(span.clientHeight);
    span.remove();
    return { width: width, height: height };
};
var AXIS_LABEL_MAX_WIDTH = 100;
var PADDING_LABEL_TO_CHART = SPACES.s3;
var PADDING_TITLE_TO_LABEL = SPACES.s4;
function calculateNamedGap(axisLabel, axisTitle) {
    var axisLabelSize = calculateDimensionsText(axisLabel);
    var axisTitleSize = calculateDimensionsText(axisTitle);
    var padding = PADDING_LABEL_TO_CHART + axisTitleSize.height + PADDING_TITLE_TO_LABEL;
    if (axisLabelSize.width > AXIS_LABEL_MAX_WIDTH + padding) {
        return AXIS_LABEL_MAX_WIDTH + padding;
    }
    else {
        return axisLabelSize.width + padding;
    }
}
function getAxisName(axis, axisMetadata) {
    var displayName = axis.displayName;
    if (displayName && displayName.length > 0) {
        return displayName;
    }
    else {
        return axisMetadata.seriesNames[0] || 'Default Axis Name';
    }
}
function buildAxis(_a) {
    var _b, _c;
    var axis = _a.axis, show = _a.show, axisMetadata = _a.axisMetadata, nameGap = _a.nameGap, axisOrientation = _a.axisOrientation, swapAxis = _a.swapAxis, showAxisPointerLabel = _a.showAxisPointerLabel, boundaryGap = _a.boundaryGap;
    var dimensionAxis = swapAxis ? 'y' : 'x';
    var isDimension = axisOrientation === dimensionAxis;
    var showLine = swapAxis ? !isDimension : isDimension;
    var otherOrientation = axisOrientation === 'y' ? 'x' : 'y';
    var defaultType = DEFAULT_TYPE[axisOrientation];
    var defaultConfig = {
        show: true,
        position: axisOrientation === 'y' && !swapAxis ? 'left' : 'bottom',
        axisLabel: { show: true, rotate: 0 },
    };
    var showAxisTitle = axis.showAxisTitle;
    var axisAlign = (_b = axis.axisAlign) !== null && _b !== void 0 ? _b : AxisAlign.start;
    var seriesOrientation = swapAxis ? otherOrientation : axisOrientation;
    var position = POSITIONS[seriesOrientation][axisAlign];
    var serieScale = axis.type || defaultType;
    var axisName = getAxisName(axis, axisMetadata);
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    // "overflow" provoke this bug https://github.com/apache/echarts/issues/16833
    return {
        show: show,
        boundaryGap: boundaryGap,
        type: serieScale,
        name: showAxisTitle ? axisName : null,
        nameLocation: 'center',
        nameRotate: axisAlign === 'end' && !isDimension ? -90 : isDimension ? 0 : 90,
        nameTextStyle: __assign(__assign({}, AXIS_NAME_STYLES), { verticalAlign: 'top', align: 'center' }),
        nameGap: nameGap,
        position: position !== null && position !== void 0 ? position : defaultConfig.position,
        axisLine: {
            show: showLine,
            lineStyle: {
                color: COLORS.gray600,
            },
        },
        axisTick: { show: false },
        splitLine: {
            show: axis.showSplitLine,
            lineStyle: {
                color: COLORS.gray200,
            },
        },
        axisPointer: {
            label: {
                show: showAxisPointerLabel,
                formatter: serieScale === 'time' ? formatTimestamp : '{value}',
            },
        },
        axisLabel: __assign(__assign({ showMaxLabel: true }, AXIS_LABEL_NAME_STYLES), { show: !!axis.showAxis, rotate: axis.rotate || ((_c = defaultConfig === null || defaultConfig === void 0 ? void 0 : defaultConfig.axisLabel) === null || _c === void 0 ? void 0 : _c.rotate), formatter: serieScale === 'time' ? CASCADING_TIME_FORMATS : '{value}', width: AXIS_LABEL_MAX_WIDTH, overflow: 'truncate' }),
    };
}
function transformXAxis(_a) {
    var dataset = _a.dataset, axisList = _a.axisList, xColumns = _a.xColumns, yColumns = _a.yColumns, swapAxis = _a.swapAxis, xTitle = _a.xTitle;
    var xAxis = axisList[0];
    var series = xColumns.filter(function (c) { return c.axisIndex === 0; });
    var ySeries = yColumns.filter(function (c) { return c.axisIndex === 0; });
    var allLines = ySeries.every(function (serie) { return serie.chartType === 'line' || serie.chartType === 'area'; });
    var serie = series[0];
    var seriesNames = (serie === null || serie === void 0 ? void 0 : serie.displayName) || (serie === null || serie === void 0 ? void 0 : serie.name);
    if (!xAxis || !serie || !seriesNames)
        return null;
    xAxis.displayName = xTitle;
    var nameGap;
    var longestWord = '';
    if (swapAxis) {
        if (xAxis.showAxis) {
            longestWord = getLongestDimensionLabel({
                dataset: dataset,
                serie: serie,
            });
            nameGap = calculateNamedGap({ text: longestWord, fontSize: AXIS_LABEL_NAME_STYLES.fontSize }, { text: seriesNames, fontSize: AXIS_NAME_STYLES.fontSize });
        }
        else {
            nameGap = SPACES.s6;
        }
    }
    else {
        if (xAxis.showAxis) {
            nameGap = SPACES.s8;
        }
        else {
            nameGap = SPACES.s2;
        }
    }
    return buildAxis({
        axisOrientation: 'x',
        boundaryGap: !allLines,
        axis: xAxis,
        show: series.length > 0,
        axisMetadata: {
            longestValue: longestWord,
            seriesNames: [seriesNames],
        },
        swapAxis: swapAxis,
        nameGap: nameGap,
        showAxisPointerLabel: true,
    });
}
function transformYAxis(_a) {
    var axisList = _a.axisList, swapAxis = _a.swapAxis, axisMetadata = _a.axisMetadata, yTitle = _a.yTitle;
    var nameGap;
    return compact(axisList.map(function (axis, axisIndex) {
        var _a;
        var metadata = axisMetadata[String(axisIndex)];
        if (!metadata)
            return null;
        if (axisIndex === 0) {
            axis.displayName = yTitle;
        }
        var title = (_a = axis.displayName) !== null && _a !== void 0 ? _a : (metadata.seriesNames[0] || '');
        if (swapAxis) {
            if (axis.showAxis) {
                nameGap = SPACES.s7;
            }
            else {
                nameGap = SPACES.s2;
            }
        }
        else if (axisMetadata) {
            if (axis.showAxis && metadata) {
                nameGap = calculateNamedGap({
                    text: addCommas(metadata.longestValue),
                    fontSize: AXIS_LABEL_NAME_STYLES.fontSize,
                }, { text: title, fontSize: AXIS_NAME_STYLES.fontSize });
            }
            else {
                nameGap = SPACES.s6;
            }
        }
        return buildAxis({
            axisOrientation: 'y',
            boundaryGap: 0,
            axis: axis,
            show: !!axis.showAxis,
            axisMetadata: metadata,
            swapAxis: swapAxis,
            nameGap: nameGap,
            showAxisPointerLabel: false,
        });
    }));
}

function isWildcard(column) {
    return column.includes('*');
}
function buildColumnString(column, chartType) {
    return {
        name: column,
        chartType: chartType,
        axisIndex: 0,
        displayName: column,
    };
}
function buildColumnObject(column, chartType) {
    var _a, _b, _c;
    return __assign(__assign({}, column), { chartType: (_a = column === null || column === void 0 ? void 0 : column.chartType) !== null && _a !== void 0 ? _a : chartType, displayName: (_b = column === null || column === void 0 ? void 0 : column.displayName) !== null && _b !== void 0 ? _b : column.name, axisIndex: (_c = column === null || column === void 0 ? void 0 : column.axisIndex) !== null && _c !== void 0 ? _c : 0 });
}
function filterByWildcard(fields, column) {
    var isStart = column.startsWith('*');
    var name = column.replace('*', '');
    return fields.filter(function (field) {
        return isStart ? field.endsWith(name) : field.startsWith(name);
    });
}
function completeStringColumn(_a) {
    var column = _a.column, chartType = _a.chartType, fields = _a.fields;
    if (!isWildcard(column))
        return buildColumnString(column, chartType);
    return filterByWildcard(fields, column).map(function (c) {
        return buildColumnString(c, chartType);
    });
}
function completeColumn(_a) {
    var column = _a.column, chartType = _a.chartType, fields = _a.fields;
    if (typeof column === 'string') {
        return completeStringColumn({ column: column, chartType: chartType, fields: fields });
    }
    if (!isWildcard(column.name))
        return buildColumnObject(column, chartType);
    return filterByWildcard(fields, column.name).map(function (name) {
        return buildColumnObject(__assign(__assign({}, column), { name: name }), chartType);
    });
}
function getColumns(_a) {
    var column = _a.column, chartType = _a.chartType, fields = _a.fields;
    if (Array.isArray(column)) {
        return flatten(column.map(function (c) { return completeColumn({ column: c, chartType: chartType, fields: fields }); }));
    }
    if (typeof column === 'string') {
        return flatten([completeStringColumn({ column: column, chartType: chartType, fields: fields })]);
    }
    return flatten([completeColumn({ column: column, chartType: chartType, fields: fields })]);
}

function swapAxisFn(_a) {
    var swapAxis = _a.swapAxis, xAxis = _a.xAxis, yAxis = _a.yAxis;
    if (!swapAxis)
        return { xAxis: xAxis, yAxis: yAxis };
    var newXaxis = yAxis;
    var newYaxis = xAxis;
    return {
        xAxis: newXaxis,
        yAxis: newYaxis,
    };
}
function completeXAxis(axis) {
    return __assign(__assign({}, X_FORMAT_DEFAULT), axis);
}
function completeYAxis(axis) {
    return __assign(__assign({}, Y_FORMAT_DEFAULT), axis);
}
var CONIFG_DEFAULTS$1 = {
    showDots: true,
    showValues: false,
    showLegend: false,
    showZoom: false,
    showDecal: false,
    scatterConfig: { style: 'circle' },
    echartsConfig: {},
};
var BASE_FORMAT = {
    showAxis: true,
    showSplitLine: false,
    displayName: null,
    rotate: 0,
    showAxisTitle: true,
    axisAlign: AxisAlign.start,
};
var X_FORMAT_DEFAULT = __assign(__assign({}, BASE_FORMAT), { type: AxisType.category });
var Y_FORMAT_DEFAULT = __assign(__assign({}, BASE_FORMAT), { showSplitLine: true, stack: false, type: AxisType.value });
// TODO: Pass theme object
function generateConfig(_a) {
    var _b, _c;
    var _d = _a.chartType, chartType = _d === void 0 ? 'bar' : _d, _e = _a.animation, animation = _e === void 0 ? true : _e, _f = _a.animationEasing, animationEasing = _f === void 0 ? 'cubicInOut' : _f, _g = _a.animationEasingUpdate, animationEasingUpdate = _g === void 0 ? 'cubicInOut' : _g, dataset = _a.dataset, _h = _a.swapAxis, swapAxis = _h === void 0 ? false : _h, x = _a.x, xTitle = _a.xTitle, y = _a.y, yTitle = _a.yTitle, _j = _a.xFormat, xFormat = _j === void 0 ? X_FORMAT_DEFAULT : _j, _k = _a.yFormat, yFormat = _k === void 0 ? Y_FORMAT_DEFAULT : _k, sort = _a.sort, _l = _a.hiddenSeries, hiddenSeries = _l === void 0 ? [] : _l, _m = _a.config, config = _m === void 0 ? CONIFG_DEFAULTS$1 : _m;
    var _o = config.showZoom, showZoom = _o === void 0 ? false : _o, _p = config.showLegend, showLegend = _p === void 0 ? false : _p, _q = config.showDecal, showDecal = _q === void 0 ? false : _q;
    var yAxisList = Array.isArray(yFormat)
        ? yFormat.map(completeYAxis)
        : [completeYAxis(yFormat)];
    var xAxisList = Array.isArray(xFormat)
        ? xFormat.map(completeXAxis)
        : [completeXAxis(xFormat)];
    var normalizeValues = ((_b = yAxisList[0]) === null || _b === void 0 ? void 0 : _b.stack) === 'normalized';
    var fields = dataset.fields;
    var xColumns = getColumns({ column: x, chartType: chartType, fields: fields });
    var yColumns = getColumns({ column: y, chartType: chartType, fields: fields });
    var _r = getDataset({
        dataset: dataset,
        normalizeValues: normalizeValues,
        sort: sort
    }), datasets = _r.datasets, datasetIndex = _r.datasetIndex;
    var dataZoom = setDataZoom({ swapAxis: swapAxis, showZoom: showZoom });
    var grid = setGrid({
        showLegend: showLegend,
        showZoom: showZoom,
        swapAxis: swapAxis,
    });
    var legend = setLegend({ show: showLegend, left: (_c = grid.left) !== null && _c !== void 0 ? _c : 0 });
    var _s = transformCartesiansSeries({
        config: config,
        swapAxis: swapAxis,
        yAxis: yAxisList,
        xColumns: xColumns,
        yColumns: yColumns,
        dataset: dataset,
        hiddenSeries: hiddenSeries,
        datasetIndex: datasetIndex
    }), series = _s.series, axisMetadata = _s.axisMetadata;
    var rawXAxis = transformXAxis({
        axisList: xAxisList,
        xColumns: xColumns,
        yColumns: yColumns,
        xTitle: xTitle,
        swapAxis: swapAxis,
        dataset: dataset,
    });
    var rawYAxis = transformYAxis({
        axisList: yAxisList,
        swapAxis: swapAxis,
        yTitle: yTitle,
        axisMetadata: axisMetadata,
        dataset: dataset,
    });
    if (!rawXAxis || !rawYAxis)
        return null;
    var _t = swapAxisFn({
        xAxis: Array.isArray(rawXAxis) ? rawXAxis : [rawXAxis],
        yAxis: Array.isArray(rawYAxis) ? rawYAxis : [rawYAxis],
        swapAxis: swapAxis,
    }), xAxis = _t.xAxis, yAxis = _t.yAxis;
    return {
        animation: animation,
        animationEasing: animationEasing,
        animationEasingUpdate: animationEasingUpdate,
        dataset: datasets,
        xAxis: xAxis,
        yAxis: yAxis,
        series: series,
        dataZoom: dataZoom,
        aria: { enabled: showDecal, decal: { show: showDecal } },
        tooltip: {
            confine: false,
            order: 'valueDesc',
            trigger: 'axis',
            axisPointer: { type: 'cross' },
        },
        legend: legend,
        grid: grid,
    };
}

function generateBarChart(props) {
    return generateConfig(__assign(__assign({}, props), { chartType: 'bar' }));
}

function generateLineChart(props) {
    return generateConfig(__assign(__assign({}, props), { chartType: 'line' }));
}

function generateAreaChart(props) {
    return generateConfig(__assign(__assign({}, props), { chartType: 'area' }));
}

var OVERFLOW_TEXT_WIDTH = 200;
var DEFAULT_LABEL_INDEX = 0;
var DEFAULT_VALUE_INDEX = 1;
function sumValues(values, valuesIndex) {
    return values.reduce(function (sum, row) {
        var value = row === null || row === void 0 ? void 0 : row[valuesIndex];
        if (value === undefined)
            return sum;
        if (isNaN$1(Number(value)))
            return sum;
        sum = sum + Number(value);
        return sum;
    }, 0);
}
var CONIFG_DEFAULTS = {
    showLabels: true,
    showTotalValue: true,
    showDecal: false,
    showLegend: false,
    showHole: false,
};
function generatePieConfig(_a) {
    var dataset = _a.dataset, sort = _a.sort, displayName = _a.displayName, _b = _a.animation, animation = _b === void 0 ? true : _b, _c = _a.config, _d = _c === void 0 ? CONIFG_DEFAULTS : _c, _e = _d.showLabels, showLabels = _e === void 0 ? true : _e, _f = _d.showTotalValue, showTotalValue = _f === void 0 ? true : _f, _g = _d.showDecal, showDecal = _g === void 0 ? false : _g, _h = _d.showLegend, showLegend = _h === void 0 ? false : _h, _j = _d.showHole, showHole = _j === void 0 ? false : _j;
    var _k = getDataset({ dataset: dataset, sort: sort }), datasets = _k.datasets, datasetIndex = _k.datasetIndex;
    var legend = setLegend({ show: showLegend });
    var totalValues = sumValues(dataset.source, DEFAULT_VALUE_INDEX);
    return {
        animation: animation,
        dataset: datasets,
        title: {
            show: showTotalValue && showHole,
            left: 'center',
            top: 'center',
            textVerticalAlign: 'top',
            text: String(Number.isInteger(totalValues) ? totalValues : totalValues.toFixed(2)),
            textStyle: {
                fontFamily: FONT.fontFamily.sans,
                fontSize: FONT.sizes.h3.fontSize,
                fontWeight: FONT.sizes.h3.fontWeight,
                lineHeight: FONT.sizes.h3.lineHeight,
                color: COLORS.gray1000,
                width: OVERFLOW_TEXT_WIDTH,
            },
            itemGap: 0,
            padding: 0,
            subtext: displayName,
            subtextStyle: {
                fontFamily: FONT.fontFamily.sans,
                fontSize: FONT.sizes.h5.fontSize,
                fontWeight: FONT.sizes.h5.fontWeight,
                lineHeight: FONT.sizes.h5.lineHeight,
                color: COLORS.gray1000,
                overflow: 'truncate',
                width: OVERFLOW_TEXT_WIDTH,
            },
        },
        series: [
            {
                type: 'pie',
                radius: [showHole ? '40%' : 0, '70%'],
                itemStyle: { borderRadius: 0, borderColor: 'white', borderWidth: 2 },
                minShowLabelAngle: 8,
                label: {
                    show: showLabels,
                    minMargin: 5,
                    edgeDistance: 10,
                    lineHeight: FONT.sizes.h6.lineHeight,
                    formatter: '{b}\n{formattedValue|{@1}}',
                    rich: {
                        formattedValue: {
                            fontSize: FONT.sizes.h6.fontSize,
                            fontWeight: FONT.sizes.h6.fontWeight,
                            lineHeight: FONT.sizes.h6.lineHeight,
                            color: COLORS.gray800,
                        },
                    },
                },
                labelLine: {
                    show: true,
                    length: 4,
                    length2: 1,
                    maxSurfaceAngle: 100,
                },
                encode: {
                    value: DEFAULT_VALUE_INDEX,
                    itemName: DEFAULT_LABEL_INDEX,
                },
                datasetIndex: datasetIndex
            },
        ],
        aria: { enabled: showDecal, decal: { show: showDecal } },
        tooltip: { trigger: 'item' },
        legend: legend,
    };
}

function generateScatterChart(_a) {
    var sizeColumn = _a.sizeColumn, _b = _a.style, style = _b === void 0 ? 'circle' : _b, _c = _a.config, config = _c === void 0 ? {} : _c, rest = __rest(_a, ["sizeColumn", "style", "config"]);
    return generateConfig(__assign(__assign({}, rest), { chartType: 'scatter', config: __assign(__assign({}, config), { scatterConfig: { column: sizeColumn, style: style } }) }));
}

var valuesRange = function (values) {
    return values.reduce(function (range, value) {
        if (isNaN(value))
            return range;
        var minRange = range[0];
        var maxRange = range[1];
        if (!minRange || !maxRange)
            return range;
        range[0] = Math.min(minRange, value);
        range[1] = Math.max(maxRange, value);
        return range;
    }, [Infinity, -Infinity]);
};
var getColoredData = function (_a) {
    var data = _a.data, valuesIndex = _a.valuesIndex, _b = _a.sort, sort = _b === void 0 ? 'descending' : _b, visualMapColor = _a.visualMapColor;
    var colorRange = visualMapColor.length - 1;
    var sortedData = data.sort(function (a, b) {
        var aValue = a[valuesIndex];
        var bValue = b[valuesIndex];
        if (!aValue || !bValue)
            return 0;
        if (isNaN(+aValue) || isNaN(+bValue))
            return 0;
        return sort === 'ascending' ? +bValue - +aValue : +aValue - +bValue;
    });
    var _c = valuesRange(data.map(function (row) {
        var rowVal = row[valuesIndex];
        if (!rowVal)
            return 0;
        return +rowVal;
    })), start = _c[0], end = _c[1];
    return sortedData.map(function (row) {
        var value = row[1] ? +row[1] : 0;
        var startValue = start ? +start : 0;
        var endValue = end ? +end : 0;
        return {
            name: row[0],
            value: value,
            itemStyle: {
                color: visualMapColor[Math.round(((value - startValue) / (endValue - startValue)) * colorRange)],
            },
        };
    });
};
function generateFunnelConfig(_a) {
    var dataset = _a.dataset, _b = _a.animation, animation = _b === void 0 ? true : _b, _c = _a.animationEasing, animationEasing = _c === void 0 ? 'cubicInOut' : _c, _d = _a.animationEasingUpdate, animationEasingUpdate = _d === void 0 ? 'cubicInOut' : _d, _e = _a.sort, sort = _e === void 0 ? 'descending' : _e, _f = _a.orientation, orientation = _f === void 0 ? 'vertical' : _f, _g = _a.showColorGradient, showColorGradient = _g === void 0 ? false : _g, _h = _a.showLabels, showLabels = _h === void 0 ? true : _h, _j = _a.showDecal, showDecal = _j === void 0 ? false : _j, _k = _a.showLegend, showLegend = _k === void 0 ? false : _k;
    var datasets = getDataset({ dataset: dataset }).datasets;
    var legend = setLegend({ show: showLegend });
    var data = showColorGradient
        ? getColoredData({
            // TODO: Implement theming
            visualMapColor: THEMES.latitude.visualMapColor,
            data: dataset.source,
            valuesIndex: 1,
            sort: sort,
        })
        : undefined;
    return {
        animation: animation,
        animationEasing: animationEasing,
        animationEasingUpdate: animationEasingUpdate,
        dataset: datasets,
        title: { show: false },
        series: [
            {
                type: 'funnel',
                data: data,
                sort: sort,
                orient: orientation,
                funnelAlign: 'center',
                left: 0,
                width: '100%',
                top: showLegend ? 30 : 0,
                bottom: 0,
                gap: 0,
                label: {
                    show: showLabels,
                    position: 'inside',
                    minMargin: 5,
                    distance: 10,
                    lineHeight: FONT.sizes.h6.lineHeight,
                    formatter: '{b}\n{formattedValue|{@0}}',
                    rich: {
                        formattedValue: {
                            fontSize: FONT.sizes.h6.fontSize,
                            fontWeight: FONT.sizes.h6.fontWeight,
                            lineHeight: FONT.sizes.h6.lineHeight,
                            color: COLORS.gray800,
                        },
                    },
                },
                itemStyle: {
                    borderColor: 'white',
                    borderWidth: 4,
                },
                emphasis: {
                    // when hovered
                    label: {
                        fontSize: FONT.sizes.h5.fontSize,
                    },
                    itemStyle: {
                        borderWidth: 0,
                    },
                },
            },
        ],
        aria: { enabled: showDecal, decal: { show: showDecal } },
        tooltip: { trigger: 'item' },
        legend: legend,
    };
}

function blankSlateCssRoot(_) {
    return 'relative h-full w-full px-4';
}
function blankSlateCssContent() {
    return "overflow-hidden animate-gradient absolute left-0 right-0 bottom-0 max-h-full w-full bg-gradient-to-r from-transparent via-white to-transparent";
}
var ERROR_CLASS = {
    wrapper: 'w-full h-full flex justify-center items-center',
};

var index$j = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get ChartTheme () { return ChartTheme; },
    ERROR_CLASS: ERROR_CLASS,
    THEMES: THEMES,
    blankSlateCssContent: blankSlateCssContent,
    blankSlateCssRoot: blankSlateCssRoot,
    generateAreaConfig: generateAreaChart,
    generateBarConfig: generateBarChart,
    generateCartesianConfig: generateConfig,
    generateFunnelConfig: generateFunnelConfig,
    generateLineConfig: generateLineChart,
    generatePieConfig: generatePieConfig,
    generateScatterConfig: generateScatterChart
});

function cssClass$e(_a) {
    var className = _a.className;
    return cn('flex flex-col', className);
}

var index$i = /*#__PURE__*/Object.freeze({
    __proto__: null,
    cssClass: cssClass$e
});

function cssClass$d(_a) {
    var className = _a.className;
    return cn("inline-flex items-center justify-center rounded-md text-sm font-medium whitespace-nowrap transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 shadow-sm bg-accent text-accent-foreground", className);
}
function selectCssClass(_a) {
    var _b = _a.isRange, isRange = _b === void 0 ? false : _b;
    return cn({
        'w-[240px]': !isRange,
        'w-[340px]': isRange
    }, 'text-left font-normal bg-white');
}
function buttonCssClass(_a) {
    var _b = _a.isRange, isRange = _b === void 0 ? false : _b;
    return cn({
        'w-[240px]': !isRange,
        'w-[340px]': isRange
    }, 'justify-start text-left font-normal overflow-hidden whitespace-nowrap text-overflow-ellipsis');
}
var POPOVER_CONTENT_CSS_CLASS = "flex w-auto flex-col space-y-2 p-2";
var POPOVER_INNER_CSS_CLASS = "w-[250px]";
var TOGGLE_GROUP_CSS_CLASS = "p-0.5 gap-0.5";
var TOGGLE_BUTTON_CSS_CLASS = "h-8 w-8 p-0 data-[state=on]:bg-background data-[state=on]:text-primary data-[state=on]:shadow-sm data-[state=on]:border data-[state=on]:border-input";
var TOGGLE_ICON_CSS_CLASS = "h-4 w-4";

var index$h = /*#__PURE__*/Object.freeze({
    __proto__: null,
    POPOVER_CONTENT_CSS_CLASS: POPOVER_CONTENT_CSS_CLASS,
    POPOVER_INNER_CSS_CLASS: POPOVER_INNER_CSS_CLASS,
    TOGGLE_BUTTON_CSS_CLASS: TOGGLE_BUTTON_CSS_CLASS,
    TOGGLE_GROUP_CSS_CLASS: TOGGLE_GROUP_CSS_CLASS,
    TOGGLE_ICON_CSS_CLASS: TOGGLE_ICON_CSS_CLASS,
    buttonCssClass: buttonCssClass,
    cssClass: cssClass$d,
    selectCssClass: selectCssClass
});

function cssClass$c(_a) {
    var className = _a.className;
    return cn('flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50', className);
}

var index$g = /*#__PURE__*/Object.freeze({
    __proto__: null,
    cssClass: cssClass$c
});

function cssClass$b(_a) {
    var className = _a.className;
    return cn('peer-disabled:cursor-not-allowed peer-disabled:opacity-70', className);
}

var index$f = /*#__PURE__*/Object.freeze({
    __proto__: null,
    cssClass: cssClass$b
});

function cssClass$a(_a) {
    var className = _a.className;
    return cn('inline-flex items-center justify-center gap-2 font-medium text-primary focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-primary transition-colors disabled:cursor-not-allowed disabled:opacity-50', className);
}

var index$e = /*#__PURE__*/Object.freeze({
    __proto__: null,
    cssClass: cssClass$a
});

function cssClass$9(_a) {
    var className = _a.className;
    return cn(zIndexes.popover, 'w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none', className);
}

var index$d = /*#__PURE__*/Object.freeze({
    __proto__: null,
    cssClass: cssClass$9
});

function cssClass$8(_a) {
    var className = _a.className;
    return cn('flex flex-row', className);
}

var index$c = /*#__PURE__*/Object.freeze({
    __proto__: null,
    cssClass: cssClass$8
});

function cssClass$7(_a) {
    var className = _a.className;
    return cn(zIndexes.selectContent, 'relative min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md focus:outline-none', className);
}
var CONTAINER_CSS_CLASS = 'w-full p-1';

var index$b = /*#__PURE__*/Object.freeze({
    __proto__: null,
    CONTAINER_CSS_CLASS: CONTAINER_CSS_CLASS,
    cssClass: cssClass$7
});

function cssClass$6(_a) {
    var className = _a.className;
    return cn('relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none data-[disabled]:pointer-events-none data-[highlighted]:bg-accent data-[highlighted]:text-accent-foreground data-[disabled]:opacity-50', className);
}
var ITEM_CSS_CLASS = 'absolute right-2 flex h-3.5 w-3.5 items-center justify-center';
var INDICATOR_CHECK_CSS_CLASS = 'h-4 w-4';

var index$a = /*#__PURE__*/Object.freeze({
    __proto__: null,
    INDICATOR_CHECK_CSS_CLASS: INDICATOR_CHECK_CSS_CLASS,
    ITEM_CSS_CLASS: ITEM_CSS_CLASS,
    cssClass: cssClass$6
});

function cssClass$5(_a) {
    var className = _a.className;
    return cn('px-2 py-1.5 text-sm font-semibold', className);
}

var index$9 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    cssClass: cssClass$5
});

function cssClass$4(_a) {
    var className = _a.className;
    return cn('-mx-1 my-1 h-px bg-muted', className);
}

var index$8 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    cssClass: cssClass$4
});

function cssClass$3(_a) {
    var className = _a.className;
    return cn('flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1', className);
}
var ICON_CSS_CLASS = "h-4 w-4 opacity-50";

var index$7 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ICON_CSS_CLASS: ICON_CSS_CLASS,
    cssClass: cssClass$3
});

var index$6 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    content: index$b,
    item: index$a,
    label: index$9,
    separator: index$8,
    trigger: index$7
});

var weights = {
    normal: 'font-normal',
    medium: 'font-medium',
    semibold: 'font-semibold',
    bold: 'font-bold',
};

var families = {
    sans: 'font-sans',
    serif: 'font-serif',
};
var leadings = {
    h1: ' leading-[3rem]',
    h2: ' leading-10',
    h3: ' leading-8',
    h4: ' leading-6',
    h5: ' leading-5',
    h6: ' leading-4',
    none: 'leading-none',
};
var sizes = {
    h1: 'text-4xl',
    h2: 'text-2xl',
    h3: 'text-xl',
    h4: 'text-normal',
    h5: 'text-sm',
    h6: 'text-xs',
};
var spacings = {
    normal: 'tracking-normal',
    wide: 'tracking-wide',
};
var alignments = {
    left: 'text-left',
    center: 'text-center',
    right: 'text-right',
};
var wordBreaks = {
    normal: 'break-normal',
    breakWord: 'break-words',
    breakAll: 'break-all',
};
var whiteSpaces = {
    normal: 'whitespace-normal',
    nowrap: 'whitespace-nowrap',
    pre: 'whitespace-pre',
    preLine: 'whitespace-pre-line',
    preWrap: 'whitespace-pre-wrap',
};
function cssClass$2(_a) {
    var _b = _a.family, family = _b === void 0 ? 'sans' : _b, _c = _a.capitalize, capitalize = _c === void 0 ? false : _c, _d = _a.centered, centered = _d === void 0 ? false : _d, className = _a.class, _e = _a.size, size = _e === void 0 ? 'h4' : _e, _f = _a.leading, leading = _f === void 0 ? 'h4' : _f, _g = _a.color, color = _g === void 0 ? 'foreground' : _g, _h = _a.ellipsis, ellipsis = _h === void 0 ? false : _h, _j = _a.lineThrough, lineThrough = _j === void 0 ? false : _j, _k = _a.underline, underline = _k === void 0 ? false : _k, _l = _a.uppercase, uppercase = _l === void 0 ? false : _l, _m = _a.align, align = _m === void 0 ? 'left' : _m, _o = _a.spacing, spacing = _o === void 0 ? 'normal' : _o, _p = _a.weight, weight = _p === void 0 ? 'normal' : _p, _q = _a.whiteSpace, whiteSpace = _q === void 0 ? 'normal' : _q, _r = _a.wordBreak, wordBreak = _r === void 0 ? 'normal' : _r;
    var sizeClass = sizes[size];
    var leadingClass = leadings[leading];
    var colorClass = colors.textColors[color];
    var familyClass = families[family];
    var weightClass = weights[weight];
    var spacingClass = spacings[spacing];
    var alignClass = alignments[align];
    var wordBreakClass = wordBreaks[wordBreak];
    var whiteSpaceClass = whiteSpaces[whiteSpace];
    return cn(sizeClass, leadingClass, colorClass, familyClass, weightClass, spacingClass, alignClass, wordBreakClass, whiteSpaceClass, {
        uppercase: uppercase,
        capitalize: capitalize,
        underline: underline,
        'line-through': lineThrough,
        'text-center': centered,
        truncate: ellipsis,
    }, className);
}

var index$5 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    alignments: alignments,
    cssClass: cssClass$2,
    families: families,
    leadings: leadings,
    sizes: sizes,
    spacings: spacings,
    whiteSpaces: whiteSpaces,
    wordBreaks: wordBreaks
});

var ToggleVariant;
(function (ToggleVariant) {
    ToggleVariant["Default"] = "default";
    ToggleVariant["Outline"] = "outline";
})(ToggleVariant || (ToggleVariant = {}));
var ToggleSize;
(function (ToggleSize) {
    ToggleSize["Default"] = "default";
    ToggleSize["Sm"] = "sm";
    ToggleSize["Lg"] = "lg";
})(ToggleSize || (ToggleSize = {}));
var TOGGLE_VARIANTS = Object.values(ToggleVariant);
var TOGGLE_SIZES = Object.values(ToggleSize);
var toggleVariants = tv({
    base: "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
    variants: {
        variant: {
            default: "bg-transparent",
            outline: "border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground",
        },
        size: {
            default: "h-9 px-3",
            sm: "h-8 px-2",
            lg: "h-10 px-3",
        },
    },
    defaultVariants: {
        variant: "default",
        size: "default",
    },
});
function cssClass$1(_a) {
    var variant = _a.variant, size = _a.size, className = _a.className;
    return cn(toggleVariants({ variant: variant, size: size, className: className }));
}

var index$4 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    TOGGLE_SIZES: TOGGLE_SIZES,
    TOGGLE_VARIANTS: TOGGLE_VARIANTS,
    get ToggleSize () { return ToggleSize; },
    get ToggleVariant () { return ToggleVariant; },
    cssClass: cssClass$1,
    toggleVariants: toggleVariants
});

function cssClass(_a) {
    var className = _a.className;
    return cn("flex items-center justify-center gap-1", className);
}
function itemCssClass(_a) {
    var ctx = _a.ctx, variant = _a.variant, size = _a.size, className = _a.className;
    return cn(toggleVariants({
        variant: ctx.variant || variant,
        size: ctx.size || size,
    }), className);
}

var index$3 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    cssClass: cssClass,
    itemCssClass: itemCssClass
});

function containerCssClass(_a) {
    var className = _a.className;
    return cn('border rounded-md w-full h-full overflow-auto whitespace-nowrap', className);
}
function tableCssClass(_a) {
    var className = _a.className;
    return cn('w-full caption-bottom text-sm table-auto', className);
}
function tableRowCssClass(_a) {
    var className = _a.className;
    return cn('border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted', className);
}
function tableHeaderCssClass(_a) {
    var className = _a.className;
    return cn('[&_tr]:border-b', className);
}
function tableHeadCssClass(_a) {
    var className = _a.className;
    return cn('h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]', className);
}
function tableFooterCssClass(_a) {
    var className = _a.className;
    return cn('bg-primary font-medium text-primary-foreground', className);
}
function tableCellCssClass(_a) {
    var className = _a.className;
    return cn('p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]', className);
}
function tableCaptionCssClass(_a) {
    var className = _a.className;
    return cn('mt-4 text-sm text-muted-foreground', className);
}
function tableBodyCssClass(_a) {
    var className = _a.className;
    return cn('[&_tr:last-child]:border-0', className);
}
var index$2 = {
    container: { cssClass: containerCssClass },
    root: { cssClass: tableCssClass },
    row: { cssClass: tableRowCssClass },
    header: { cssClass: tableHeaderCssClass },
    head: { cssClass: tableHeadCssClass },
    footer: { cssClass: tableFooterCssClass },
    cell: { cssClass: tableCellCssClass },
    caption: { cssClass: tableCaptionCssClass },
    body: { cssClass: tableBodyCssClass },
};

var index$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    alert: index$z,
    button: index$y,
    calendar: index$l,
    card: index$k,
    chart: index$j,
    column: index$i,
    datePicker: index$h,
    input: index$g,
    label: index$f,
    link: index$e,
    popover: index$d,
    row: index$c,
    select: index$6,
    table: index$2,
    text: index$5,
    toggle: index$4,
    toggleGroup: index$3
});

var index = /*#__PURE__*/Object.freeze({
    __proto__: null,
    skins: index$B,
    ui: index$1,
    utils: index$A
});

var ApiError = /** @class */ (function (_super) {
    __extends(ApiError, _super);
    function ApiError(message, status) {
        var _this = _super.call(this, message) || this;
        _this.status = status;
        return _this;
    }
    return ApiError;
}(Error));
var LatitudeApi = /** @class */ (function () {
    function LatitudeApi() {
        this.cors = 'cors';
        this.customHeaders = {};
    }
    LatitudeApi.prototype.configure = function (_a) {
        var host = _a.host, cors = _a.cors, customHeaders = _a.customHeaders;
        if (host !== undefined)
            this.host = host;
        if (cors !== undefined)
            this.cors = cors;
        if (customHeaders)
            this.customHeaders = customHeaders;
    };
    LatitudeApi.prototype.get = function (urlStr, params, additionalHeaders) {
        if (params === void 0) { params = {}; }
        if (additionalHeaders === void 0) { additionalHeaders = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var url, init;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this.buildUrl("".concat(urlStr), params);
                        init = {
                            method: 'GET',
                            headers: this.buildHeaders({
                                customHeaders: __assign(__assign({}, this.customHeaders), additionalHeaders),
                            }),
                            mode: this.cors,
                        };
                        return [4 /*yield*/, this.request(function () { return __awaiter(_this, void 0, void 0, function () {
                                var res;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, globalThis.window.fetch(url.href, init)];
                                        case 1:
                                            res = _a.sent();
                                            return [2 /*return*/, this.handleResponse(res)];
                                    }
                                });
                            }); })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    LatitudeApi.prototype.buildUrl = function (urlStr, params) {
        if (params === void 0) { params = {}; }
        var url = new URL("".concat(this.safeHost, "/").concat(urlStr));
        var formattedParams = Object.entries(params)
            .map(function (_a) {
            var key = _a[0], value = _a[1];
            return "".concat(key, "=").concat(format$1(value));
        })
            .join('&');
        url.search = formattedParams;
        return url;
    };
    Object.defineProperty(LatitudeApi.prototype, "safeHost", {
        get: function () {
            var _a;
            return (_a = this.host) !== null && _a !== void 0 ? _a : globalThis.location.origin;
        },
        enumerable: false,
        configurable: true
    });
    LatitudeApi.prototype.buildHeaders = function (_a) {
        var customHeaders = _a.customHeaders;
        var headers = new Headers();
        headers.append('Content-Type', 'application/json');
        headers.append('Accept', 'application/json');
        Object.keys(customHeaders).forEach(function (key) {
            return headers.append(key, customHeaders[key]);
        });
        return headers;
    };
    LatitudeApi.prototype.request = function (fn) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fn()];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    LatitudeApi.prototype.handleResponse = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var errorMessage, contentType, json, text;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (response.ok)
                            return [2 /*return*/, response.json()];
                        errorMessage = 'Unexpected API error';
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 6, , 7]);
                        contentType = response.headers.get('Content-Type');
                        if (!(contentType && contentType.includes('application/json'))) return [3 /*break*/, 3];
                        return [4 /*yield*/, response.json()];
                    case 2:
                        json = _b.sent();
                        if (json.errors) {
                            errorMessage = json.errors
                                .map(function (e) { return e.detail; })
                                .join(', ');
                        }
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, response.text()];
                    case 4:
                        text = _b.sent();
                        errorMessage = text;
                        _b.label = 5;
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        _b.sent();
                        errorMessage = 'Error parsing API response';
                        return [3 /*break*/, 7];
                    case 7: throw new ApiError(errorMessage, response.status);
                }
            });
        });
    };
    return LatitudeApi;
}());
var api = new LatitudeApi();

var FORCE_REFETCH_PARAMETER = '__force';
var createQueryKey = function (queryPath, params) {
    var hashedParams = Object.keys(params)
        .sort()
        .map(function (key) { return "".concat(key, "=").concat(String(params[key])); })
        .join('&');
    return "query:".concat(queryPath, "?").concat(hashedParams);
};
var store = createStore(function (set, get) {
    var performQueryFetch = function (queryKey, fetchFn) { return __awaiter(void 0, void 0, void 0, function () {
        var response, data_1, error_1;
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    set(function (state) {
                        var _a;
                        return ({
                            queries: __assign(__assign({}, state.queries), (_a = {}, _a[queryKey] = __assign(__assign({}, (state.queries[queryKey] || {})), { isLoading: true, error: null }), _a)),
                        });
                    });
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, fetchFn()];
                case 2:
                    response = _b.sent();
                    data_1 = new QueryResult({
                        fields: response.fields,
                        rows: response.rows,
                        rowCount: (_a = response.rows) === null || _a === void 0 ? void 0 : _a.length,
                    });
                    set(function (state) {
                        var _a;
                        return ({
                            queries: __assign(__assign({}, state.queries), (_a = {}, _a[queryKey] = { data: data_1, isLoading: false, error: null }, _a)),
                        });
                    });
                    return [3 /*break*/, 4];
                case 3:
                    error_1 = _b.sent();
                    set(function (state) {
                        var _a;
                        return ({
                            queries: __assign(__assign({}, state.queries), (_a = {}, _a[queryKey] = {
                                data: null,
                                isLoading: false,
                                error: error_1 instanceof Error ? error_1 : new Error('An error occurred'),
                            }, _a)),
                        });
                    });
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    }); };
    return {
        queries: {},
        fetch: function (_a) {
            var queryPath = _a.queryPath, params = _a.params;
            return __awaiter(void 0, void 0, void 0, function () {
                var queryKey;
                return __generator(this, function (_b) {
                    queryKey = createQueryKey(queryPath, params || {});
                    if (get().queries[queryKey])
                        return [2 /*return*/];
                    performQueryFetch(queryKey, function () { return __awaiter(void 0, void 0, void 0, function () {
                        var response;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, api.get("api/queries/".concat(queryPath), params)];
                                case 1:
                                    response = _a.sent();
                                    return [2 /*return*/, new QueryResult(response)];
                            }
                        });
                    }); });
                    return [2 /*return*/];
                });
            });
        },
        forceRefetch: function (_a) {
            var queryPath = _a.queryPath, params = _a.params;
            return __awaiter(void 0, void 0, void 0, function () {
                var queryKey;
                return __generator(this, function (_b) {
                    queryKey = createQueryKey(queryPath, params || {});
                    performQueryFetch(queryKey, function () { return __awaiter(void 0, void 0, void 0, function () {
                        var response;
                        var _a;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0: return [4 /*yield*/, api.get("api/queries/".concat(queryPath), __assign(__assign({}, params), (_a = {}, _a[FORCE_REFETCH_PARAMETER] = 'true', _a)))];
                                case 1:
                                    response = _b.sent();
                                    return [2 /*return*/, new QueryResult(response)];
                            }
                        });
                    }); });
                    return [2 /*return*/];
                });
            });
        },
    };
});
var useFetchQuery = function (queryPath, params) {
    if (params === void 0) { params = {}; }
    var queryKey = createQueryKey(queryPath, params);
    var state = store.getState();
    if (!state.queries[queryKey]) {
        state.fetch({ queryPath: queryPath, params: params });
    }
    return store.subscribe(function (state) { return state.queries[queryKey]; });
};
var useRunQuery = function (queryPath, params) {
    store.getState().forceRefetch({ queryPath: queryPath, params: params });
};

export { ApiError, FORCE_REFETCH_PARAMETER, api, colors, createQueryKey, store, index as theme, useFetchQuery, useRunQuery, weights, zIndexes };
