import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { AthenaServiceException as __BaseException } from "./AthenaServiceException";
export declare const S3AclOption: {
  readonly BUCKET_OWNER_FULL_CONTROL: "BUCKET_OWNER_FULL_CONTROL";
};
export type S3AclOption = (typeof S3AclOption)[keyof typeof S3AclOption];
export interface AclConfiguration {
  S3AclOption: S3AclOption | undefined;
}
export interface BatchGetNamedQueryInput {
  NamedQueryIds: string[] | undefined;
}
export interface NamedQuery {
  Name: string | undefined;
  Description?: string;
  Database: string | undefined;
  QueryString: string | undefined;
  NamedQueryId?: string;
  WorkGroup?: string;
}
export interface UnprocessedNamedQueryId {
  NamedQueryId?: string;
  ErrorCode?: string;
  ErrorMessage?: string;
}
export interface BatchGetNamedQueryOutput {
  NamedQueries?: NamedQuery[];
  UnprocessedNamedQueryIds?: UnprocessedNamedQueryId[];
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class InvalidRequestException extends __BaseException {
  readonly name: "InvalidRequestException";
  readonly $fault: "client";
  AthenaErrorCode?: string;
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidRequestException, __BaseException>
  );
}
export interface BatchGetPreparedStatementInput {
  PreparedStatementNames: string[] | undefined;
  WorkGroup: string | undefined;
}
export interface PreparedStatement {
  StatementName?: string;
  QueryStatement?: string;
  WorkGroupName?: string;
  Description?: string;
  LastModifiedTime?: Date;
}
export interface UnprocessedPreparedStatementName {
  StatementName?: string;
  ErrorCode?: string;
  ErrorMessage?: string;
}
export interface BatchGetPreparedStatementOutput {
  PreparedStatements?: PreparedStatement[];
  UnprocessedPreparedStatementNames?: UnprocessedPreparedStatementName[];
}
export interface BatchGetQueryExecutionInput {
  QueryExecutionIds: string[] | undefined;
}
export interface EngineVersion {
  SelectedEngineVersion?: string;
  EffectiveEngineVersion?: string;
}
export interface QueryExecutionContext {
  Database?: string;
  Catalog?: string;
}
export declare const AuthenticationType: {
  readonly DIRECTORY_IDENTITY: "DIRECTORY_IDENTITY";
};
export type AuthenticationType =
  (typeof AuthenticationType)[keyof typeof AuthenticationType];
export interface QueryResultsS3AccessGrantsConfiguration {
  EnableS3AccessGrants: boolean | undefined;
  CreateUserLevelPrefix?: boolean;
  AuthenticationType: AuthenticationType | undefined;
}
export declare const EncryptionOption: {
  readonly CSE_KMS: "CSE_KMS";
  readonly SSE_KMS: "SSE_KMS";
  readonly SSE_S3: "SSE_S3";
};
export type EncryptionOption =
  (typeof EncryptionOption)[keyof typeof EncryptionOption];
export interface EncryptionConfiguration {
  EncryptionOption: EncryptionOption | undefined;
  KmsKey?: string;
}
export interface ResultConfiguration {
  OutputLocation?: string;
  EncryptionConfiguration?: EncryptionConfiguration;
  ExpectedBucketOwner?: string;
  AclConfiguration?: AclConfiguration;
}
export interface ResultReuseByAgeConfiguration {
  Enabled: boolean | undefined;
  MaxAgeInMinutes?: number;
}
export interface ResultReuseConfiguration {
  ResultReuseByAgeConfiguration?: ResultReuseByAgeConfiguration;
}
export declare const StatementType: {
  readonly DDL: "DDL";
  readonly DML: "DML";
  readonly UTILITY: "UTILITY";
};
export type StatementType = (typeof StatementType)[keyof typeof StatementType];
export interface ResultReuseInformation {
  ReusedPreviousResult: boolean | undefined;
}
export interface QueryExecutionStatistics {
  EngineExecutionTimeInMillis?: number;
  DataScannedInBytes?: number;
  DataManifestLocation?: string;
  TotalExecutionTimeInMillis?: number;
  QueryQueueTimeInMillis?: number;
  ServicePreProcessingTimeInMillis?: number;
  QueryPlanningTimeInMillis?: number;
  ServiceProcessingTimeInMillis?: number;
  ResultReuseInformation?: ResultReuseInformation;
}
export interface AthenaError {
  ErrorCategory?: number;
  ErrorType?: number;
  Retryable?: boolean;
  ErrorMessage?: string;
}
export declare const QueryExecutionState: {
  readonly CANCELLED: "CANCELLED";
  readonly FAILED: "FAILED";
  readonly QUEUED: "QUEUED";
  readonly RUNNING: "RUNNING";
  readonly SUCCEEDED: "SUCCEEDED";
};
export type QueryExecutionState =
  (typeof QueryExecutionState)[keyof typeof QueryExecutionState];
export interface QueryExecutionStatus {
  State?: QueryExecutionState;
  StateChangeReason?: string;
  SubmissionDateTime?: Date;
  CompletionDateTime?: Date;
  AthenaError?: AthenaError;
}
export interface QueryExecution {
  QueryExecutionId?: string;
  Query?: string;
  StatementType?: StatementType;
  ResultConfiguration?: ResultConfiguration;
  ResultReuseConfiguration?: ResultReuseConfiguration;
  QueryExecutionContext?: QueryExecutionContext;
  Status?: QueryExecutionStatus;
  Statistics?: QueryExecutionStatistics;
  WorkGroup?: string;
  EngineVersion?: EngineVersion;
  ExecutionParameters?: string[];
  SubstatementType?: string;
  QueryResultsS3AccessGrantsConfiguration?: QueryResultsS3AccessGrantsConfiguration;
}
export interface UnprocessedQueryExecutionId {
  QueryExecutionId?: string;
  ErrorCode?: string;
  ErrorMessage?: string;
}
export interface BatchGetQueryExecutionOutput {
  QueryExecutions?: QueryExecution[];
  UnprocessedQueryExecutionIds?: UnprocessedQueryExecutionId[];
}
export interface CancelCapacityReservationInput {
  Name: string | undefined;
}
export interface CancelCapacityReservationOutput {}
export interface Tag {
  Key?: string;
  Value?: string;
}
export interface CreateCapacityReservationInput {
  TargetDpus: number | undefined;
  Name: string | undefined;
  Tags?: Tag[];
}
export interface CreateCapacityReservationOutput {}
export declare const DataCatalogType: {
  readonly GLUE: "GLUE";
  readonly HIVE: "HIVE";
  readonly LAMBDA: "LAMBDA";
};
export type DataCatalogType =
  (typeof DataCatalogType)[keyof typeof DataCatalogType];
export interface CreateDataCatalogInput {
  Name: string | undefined;
  Type: DataCatalogType | undefined;
  Description?: string;
  Parameters?: Record<string, string>;
  Tags?: Tag[];
}
export interface CreateDataCatalogOutput {}
export interface CreateNamedQueryInput {
  Name: string | undefined;
  Description?: string;
  Database: string | undefined;
  QueryString: string | undefined;
  ClientRequestToken?: string;
  WorkGroup?: string;
}
export interface CreateNamedQueryOutput {
  NamedQueryId?: string;
}
export interface CreateNotebookInput {
  WorkGroup: string | undefined;
  Name: string | undefined;
  ClientRequestToken?: string;
}
export interface CreateNotebookOutput {
  NotebookId?: string;
}
export declare const ThrottleReason: {
  readonly CONCURRENT_QUERY_LIMIT_EXCEEDED: "CONCURRENT_QUERY_LIMIT_EXCEEDED";
};
export type ThrottleReason =
  (typeof ThrottleReason)[keyof typeof ThrottleReason];
export declare class TooManyRequestsException extends __BaseException {
  readonly name: "TooManyRequestsException";
  readonly $fault: "client";
  Message?: string;
  Reason?: ThrottleReason;
  constructor(
    opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>
  );
}
export interface CreatePreparedStatementInput {
  StatementName: string | undefined;
  WorkGroup: string | undefined;
  QueryStatement: string | undefined;
  Description?: string;
}
export interface CreatePreparedStatementOutput {}
export interface CreatePresignedNotebookUrlRequest {
  SessionId: string | undefined;
}
export interface CreatePresignedNotebookUrlResponse {
  NotebookUrl: string | undefined;
  AuthToken: string | undefined;
  AuthTokenExpirationTime: number | undefined;
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  Message?: string;
  ResourceName?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export interface CustomerContentEncryptionConfiguration {
  KmsKey: string | undefined;
}
export interface IdentityCenterConfiguration {
  EnableIdentityCenter?: boolean;
  IdentityCenterInstanceArn?: string;
}
export interface WorkGroupConfiguration {
  ResultConfiguration?: ResultConfiguration;
  EnforceWorkGroupConfiguration?: boolean;
  PublishCloudWatchMetricsEnabled?: boolean;
  BytesScannedCutoffPerQuery?: number;
  RequesterPaysEnabled?: boolean;
  EngineVersion?: EngineVersion;
  AdditionalConfiguration?: string;
  ExecutionRole?: string;
  CustomerContentEncryptionConfiguration?: CustomerContentEncryptionConfiguration;
  EnableMinimumEncryptionConfiguration?: boolean;
  IdentityCenterConfiguration?: IdentityCenterConfiguration;
  QueryResultsS3AccessGrantsConfiguration?: QueryResultsS3AccessGrantsConfiguration;
}
export interface CreateWorkGroupInput {
  Name: string | undefined;
  Configuration?: WorkGroupConfiguration;
  Description?: string;
  Tags?: Tag[];
}
export interface CreateWorkGroupOutput {}
export interface DeleteCapacityReservationInput {
  Name: string | undefined;
}
export interface DeleteCapacityReservationOutput {}
export interface DeleteDataCatalogInput {
  Name: string | undefined;
}
export interface DeleteDataCatalogOutput {}
export interface DeleteNamedQueryInput {
  NamedQueryId?: string;
}
export interface DeleteNamedQueryOutput {}
export interface DeleteNotebookInput {
  NotebookId: string | undefined;
}
export interface DeleteNotebookOutput {}
export interface DeletePreparedStatementInput {
  StatementName: string | undefined;
  WorkGroup: string | undefined;
}
export interface DeletePreparedStatementOutput {}
export interface DeleteWorkGroupInput {
  WorkGroup: string | undefined;
  RecursiveDeleteOption?: boolean;
}
export interface DeleteWorkGroupOutput {}
export interface ExportNotebookInput {
  NotebookId: string | undefined;
}
export declare const NotebookType: {
  readonly IPYNB: "IPYNB";
};
export type NotebookType = (typeof NotebookType)[keyof typeof NotebookType];
export interface NotebookMetadata {
  NotebookId?: string;
  Name?: string;
  WorkGroup?: string;
  CreationTime?: Date;
  Type?: NotebookType;
  LastModifiedTime?: Date;
}
export interface ExportNotebookOutput {
  NotebookMetadata?: NotebookMetadata;
  Payload?: string;
}
export interface GetCalculationExecutionRequest {
  CalculationExecutionId: string | undefined;
}
export interface CalculationResult {
  StdOutS3Uri?: string;
  StdErrorS3Uri?: string;
  ResultS3Uri?: string;
  ResultType?: string;
}
export interface CalculationStatistics {
  DpuExecutionInMillis?: number;
  Progress?: string;
}
export declare const CalculationExecutionState: {
  readonly CANCELED: "CANCELED";
  readonly CANCELING: "CANCELING";
  readonly COMPLETED: "COMPLETED";
  readonly CREATED: "CREATED";
  readonly CREATING: "CREATING";
  readonly FAILED: "FAILED";
  readonly QUEUED: "QUEUED";
  readonly RUNNING: "RUNNING";
};
export type CalculationExecutionState =
  (typeof CalculationExecutionState)[keyof typeof CalculationExecutionState];
export interface CalculationStatus {
  SubmissionDateTime?: Date;
  CompletionDateTime?: Date;
  State?: CalculationExecutionState;
  StateChangeReason?: string;
}
export interface GetCalculationExecutionResponse {
  CalculationExecutionId?: string;
  SessionId?: string;
  Description?: string;
  WorkingDirectory?: string;
  Status?: CalculationStatus;
  Statistics?: CalculationStatistics;
  Result?: CalculationResult;
}
export interface GetCalculationExecutionCodeRequest {
  CalculationExecutionId: string | undefined;
}
export interface GetCalculationExecutionCodeResponse {
  CodeBlock?: string;
}
export interface GetCalculationExecutionStatusRequest {
  CalculationExecutionId: string | undefined;
}
export interface GetCalculationExecutionStatusResponse {
  Status?: CalculationStatus;
  Statistics?: CalculationStatistics;
}
export interface GetCapacityAssignmentConfigurationInput {
  CapacityReservationName: string | undefined;
}
export interface CapacityAssignment {
  WorkGroupNames?: string[];
}
export interface CapacityAssignmentConfiguration {
  CapacityReservationName?: string;
  CapacityAssignments?: CapacityAssignment[];
}
export interface GetCapacityAssignmentConfigurationOutput {
  CapacityAssignmentConfiguration: CapacityAssignmentConfiguration | undefined;
}
export interface GetCapacityReservationInput {
  Name: string | undefined;
}
export declare const CapacityAllocationStatus: {
  readonly FAILED: "FAILED";
  readonly PENDING: "PENDING";
  readonly SUCCEEDED: "SUCCEEDED";
};
export type CapacityAllocationStatus =
  (typeof CapacityAllocationStatus)[keyof typeof CapacityAllocationStatus];
export interface CapacityAllocation {
  Status: CapacityAllocationStatus | undefined;
  StatusMessage?: string;
  RequestTime: Date | undefined;
  RequestCompletionTime?: Date;
}
export declare const CapacityReservationStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly CANCELLED: "CANCELLED";
  readonly CANCELLING: "CANCELLING";
  readonly FAILED: "FAILED";
  readonly PENDING: "PENDING";
  readonly UPDATE_PENDING: "UPDATE_PENDING";
};
export type CapacityReservationStatus =
  (typeof CapacityReservationStatus)[keyof typeof CapacityReservationStatus];
export interface CapacityReservation {
  Name: string | undefined;
  Status: CapacityReservationStatus | undefined;
  TargetDpus: number | undefined;
  AllocatedDpus: number | undefined;
  LastAllocation?: CapacityAllocation;
  LastSuccessfulAllocationTime?: Date;
  CreationTime: Date | undefined;
}
export interface GetCapacityReservationOutput {
  CapacityReservation: CapacityReservation | undefined;
}
export interface GetDatabaseInput {
  CatalogName: string | undefined;
  DatabaseName: string | undefined;
  WorkGroup?: string;
}
export interface Database {
  Name: string | undefined;
  Description?: string;
  Parameters?: Record<string, string>;
}
export interface GetDatabaseOutput {
  Database?: Database;
}
export declare class MetadataException extends __BaseException {
  readonly name: "MetadataException";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<MetadataException, __BaseException>);
}
export interface GetDataCatalogInput {
  Name: string | undefined;
  WorkGroup?: string;
}
export interface DataCatalog {
  Name: string | undefined;
  Description?: string;
  Type: DataCatalogType | undefined;
  Parameters?: Record<string, string>;
}
export interface GetDataCatalogOutput {
  DataCatalog?: DataCatalog;
}
export interface GetNamedQueryInput {
  NamedQueryId: string | undefined;
}
export interface GetNamedQueryOutput {
  NamedQuery?: NamedQuery;
}
export interface GetNotebookMetadataInput {
  NotebookId: string | undefined;
}
export interface GetNotebookMetadataOutput {
  NotebookMetadata?: NotebookMetadata;
}
export interface GetPreparedStatementInput {
  StatementName: string | undefined;
  WorkGroup: string | undefined;
}
export interface GetPreparedStatementOutput {
  PreparedStatement?: PreparedStatement;
}
export interface GetQueryExecutionInput {
  QueryExecutionId: string | undefined;
}
export interface GetQueryExecutionOutput {
  QueryExecution?: QueryExecution;
}
export interface GetQueryResultsInput {
  QueryExecutionId: string | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export declare const ColumnNullable: {
  readonly NOT_NULL: "NOT_NULL";
  readonly NULLABLE: "NULLABLE";
  readonly UNKNOWN: "UNKNOWN";
};
export type ColumnNullable =
  (typeof ColumnNullable)[keyof typeof ColumnNullable];
export interface ColumnInfo {
  CatalogName?: string;
  SchemaName?: string;
  TableName?: string;
  Name: string | undefined;
  Label?: string;
  Type: string | undefined;
  Precision?: number;
  Scale?: number;
  Nullable?: ColumnNullable;
  CaseSensitive?: boolean;
}
export interface ResultSetMetadata {
  ColumnInfo?: ColumnInfo[];
}
export interface Datum {
  VarCharValue?: string;
}
export interface Row {
  Data?: Datum[];
}
export interface ResultSet {
  Rows?: Row[];
  ResultSetMetadata?: ResultSetMetadata;
}
export interface GetQueryResultsOutput {
  UpdateCount?: number;
  ResultSet?: ResultSet;
  NextToken?: string;
}
export interface GetQueryRuntimeStatisticsInput {
  QueryExecutionId: string | undefined;
}
export interface QueryRuntimeStatisticsRows {
  InputRows?: number;
  InputBytes?: number;
  OutputBytes?: number;
  OutputRows?: number;
}
export interface QueryRuntimeStatisticsTimeline {
  QueryQueueTimeInMillis?: number;
  ServicePreProcessingTimeInMillis?: number;
  QueryPlanningTimeInMillis?: number;
  EngineExecutionTimeInMillis?: number;
  ServiceProcessingTimeInMillis?: number;
  TotalExecutionTimeInMillis?: number;
}
export interface GetSessionRequest {
  SessionId: string | undefined;
}
export interface EngineConfiguration {
  CoordinatorDpuSize?: number;
  MaxConcurrentDpus: number | undefined;
  DefaultExecutorDpuSize?: number;
  AdditionalConfigs?: Record<string, string>;
  SparkProperties?: Record<string, string>;
}
export interface SessionConfiguration {
  ExecutionRole?: string;
  WorkingDirectory?: string;
  IdleTimeoutSeconds?: number;
  EncryptionConfiguration?: EncryptionConfiguration;
}
export interface SessionStatistics {
  DpuExecutionInMillis?: number;
}
export declare const SessionState: {
  readonly BUSY: "BUSY";
  readonly CREATED: "CREATED";
  readonly CREATING: "CREATING";
  readonly DEGRADED: "DEGRADED";
  readonly FAILED: "FAILED";
  readonly IDLE: "IDLE";
  readonly TERMINATED: "TERMINATED";
  readonly TERMINATING: "TERMINATING";
};
export type SessionState = (typeof SessionState)[keyof typeof SessionState];
export interface SessionStatus {
  StartDateTime?: Date;
  LastModifiedDateTime?: Date;
  EndDateTime?: Date;
  IdleSinceDateTime?: Date;
  State?: SessionState;
  StateChangeReason?: string;
}
export interface GetSessionResponse {
  SessionId?: string;
  Description?: string;
  WorkGroup?: string;
  EngineVersion?: string;
  EngineConfiguration?: EngineConfiguration;
  NotebookVersion?: string;
  SessionConfiguration?: SessionConfiguration;
  Status?: SessionStatus;
  Statistics?: SessionStatistics;
}
export interface GetSessionStatusRequest {
  SessionId: string | undefined;
}
export interface GetSessionStatusResponse {
  SessionId?: string;
  Status?: SessionStatus;
}
export interface GetTableMetadataInput {
  CatalogName: string | undefined;
  DatabaseName: string | undefined;
  TableName: string | undefined;
  WorkGroup?: string;
}
export interface Column {
  Name: string | undefined;
  Type?: string;
  Comment?: string;
}
export interface TableMetadata {
  Name: string | undefined;
  CreateTime?: Date;
  LastAccessTime?: Date;
  TableType?: string;
  Columns?: Column[];
  PartitionKeys?: Column[];
  Parameters?: Record<string, string>;
}
export interface GetTableMetadataOutput {
  TableMetadata?: TableMetadata;
}
export interface GetWorkGroupInput {
  WorkGroup: string | undefined;
}
export declare const WorkGroupState: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type WorkGroupState =
  (typeof WorkGroupState)[keyof typeof WorkGroupState];
export interface WorkGroup {
  Name: string | undefined;
  State?: WorkGroupState;
  Configuration?: WorkGroupConfiguration;
  Description?: string;
  CreationTime?: Date;
  IdentityCenterApplicationArn?: string;
}
export interface GetWorkGroupOutput {
  WorkGroup?: WorkGroup;
}
export interface ImportNotebookInput {
  WorkGroup: string | undefined;
  Name: string | undefined;
  Payload?: string;
  Type: NotebookType | undefined;
  NotebookS3LocationUri?: string;
  ClientRequestToken?: string;
}
export interface ImportNotebookOutput {
  NotebookId?: string;
}
export interface ListApplicationDPUSizesInput {
  MaxResults?: number;
  NextToken?: string;
}
export interface ApplicationDPUSizes {
  ApplicationRuntimeId?: string;
  SupportedDPUSizes?: number[];
}
export interface ListApplicationDPUSizesOutput {
  ApplicationDPUSizes?: ApplicationDPUSizes[];
  NextToken?: string;
}
export interface ListCalculationExecutionsRequest {
  SessionId: string | undefined;
  StateFilter?: CalculationExecutionState;
  MaxResults?: number;
  NextToken?: string;
}
export interface CalculationSummary {
  CalculationExecutionId?: string;
  Description?: string;
  Status?: CalculationStatus;
}
export interface ListCalculationExecutionsResponse {
  NextToken?: string;
  Calculations?: CalculationSummary[];
}
export interface ListCapacityReservationsInput {
  NextToken?: string;
  MaxResults?: number;
}
export interface ListCapacityReservationsOutput {
  NextToken?: string;
  CapacityReservations: CapacityReservation[] | undefined;
}
export interface ListDatabasesInput {
  CatalogName: string | undefined;
  NextToken?: string;
  MaxResults?: number;
  WorkGroup?: string;
}
export interface ListDatabasesOutput {
  DatabaseList?: Database[];
  NextToken?: string;
}
export interface ListDataCatalogsInput {
  NextToken?: string;
  MaxResults?: number;
  WorkGroup?: string;
}
export interface DataCatalogSummary {
  CatalogName?: string;
  Type?: DataCatalogType;
}
export interface ListDataCatalogsOutput {
  DataCatalogsSummary?: DataCatalogSummary[];
  NextToken?: string;
}
export interface ListEngineVersionsInput {
  NextToken?: string;
  MaxResults?: number;
}
export interface ListEngineVersionsOutput {
  EngineVersions?: EngineVersion[];
  NextToken?: string;
}
export declare const ExecutorState: {
  readonly CREATED: "CREATED";
  readonly CREATING: "CREATING";
  readonly FAILED: "FAILED";
  readonly REGISTERED: "REGISTERED";
  readonly TERMINATED: "TERMINATED";
  readonly TERMINATING: "TERMINATING";
};
export type ExecutorState = (typeof ExecutorState)[keyof typeof ExecutorState];
export interface ListExecutorsRequest {
  SessionId: string | undefined;
  ExecutorStateFilter?: ExecutorState;
  MaxResults?: number;
  NextToken?: string;
}
export declare const ExecutorType: {
  readonly COORDINATOR: "COORDINATOR";
  readonly GATEWAY: "GATEWAY";
  readonly WORKER: "WORKER";
};
export type ExecutorType = (typeof ExecutorType)[keyof typeof ExecutorType];
export interface ExecutorsSummary {
  ExecutorId: string | undefined;
  ExecutorType?: ExecutorType;
  StartDateTime?: number;
  TerminationDateTime?: number;
  ExecutorState?: ExecutorState;
  ExecutorSize?: number;
}
export interface ListExecutorsResponse {
  SessionId: string | undefined;
  NextToken?: string;
  ExecutorsSummary?: ExecutorsSummary[];
}
export interface ListNamedQueriesInput {
  NextToken?: string;
  MaxResults?: number;
  WorkGroup?: string;
}
export interface ListNamedQueriesOutput {
  NamedQueryIds?: string[];
  NextToken?: string;
}
export interface FilterDefinition {
  Name?: string;
}
export interface ListNotebookMetadataInput {
  Filters?: FilterDefinition;
  NextToken?: string;
  MaxResults?: number;
  WorkGroup: string | undefined;
}
export interface ListNotebookMetadataOutput {
  NextToken?: string;
  NotebookMetadataList?: NotebookMetadata[];
}
export interface ListNotebookSessionsRequest {
  NotebookId: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface NotebookSessionSummary {
  SessionId?: string;
  CreationTime?: Date;
}
export interface ListNotebookSessionsResponse {
  NotebookSessionsList: NotebookSessionSummary[] | undefined;
  NextToken?: string;
}
export interface ListPreparedStatementsInput {
  WorkGroup: string | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface PreparedStatementSummary {
  StatementName?: string;
  LastModifiedTime?: Date;
}
export interface ListPreparedStatementsOutput {
  PreparedStatements?: PreparedStatementSummary[];
  NextToken?: string;
}
export interface ListQueryExecutionsInput {
  NextToken?: string;
  MaxResults?: number;
  WorkGroup?: string;
}
export interface ListQueryExecutionsOutput {
  QueryExecutionIds?: string[];
  NextToken?: string;
}
export interface ListSessionsRequest {
  WorkGroup: string | undefined;
  StateFilter?: SessionState;
  MaxResults?: number;
  NextToken?: string;
}
export interface SessionSummary {
  SessionId?: string;
  Description?: string;
  EngineVersion?: EngineVersion;
  NotebookVersion?: string;
  Status?: SessionStatus;
}
export interface ListSessionsResponse {
  NextToken?: string;
  Sessions?: SessionSummary[];
}
export interface ListTableMetadataInput {
  CatalogName: string | undefined;
  DatabaseName: string | undefined;
  Expression?: string;
  NextToken?: string;
  MaxResults?: number;
  WorkGroup?: string;
}
export interface ListTableMetadataOutput {
  TableMetadataList?: TableMetadata[];
  NextToken?: string;
}
export interface ListTagsForResourceInput {
  ResourceARN: string | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListTagsForResourceOutput {
  Tags?: Tag[];
  NextToken?: string;
}
export interface ListWorkGroupsInput {
  NextToken?: string;
  MaxResults?: number;
}
export interface WorkGroupSummary {
  Name?: string;
  State?: WorkGroupState;
  Description?: string;
  CreationTime?: Date;
  EngineVersion?: EngineVersion;
  IdentityCenterApplicationArn?: string;
}
export interface ListWorkGroupsOutput {
  WorkGroups?: WorkGroupSummary[];
  NextToken?: string;
}
export interface PutCapacityAssignmentConfigurationInput {
  CapacityReservationName: string | undefined;
  CapacityAssignments: CapacityAssignment[] | undefined;
}
export interface PutCapacityAssignmentConfigurationOutput {}
export interface CalculationConfiguration {
  CodeBlock?: string;
}
export interface StartCalculationExecutionRequest {
  SessionId: string | undefined;
  Description?: string;
  CalculationConfiguration?: CalculationConfiguration;
  CodeBlock?: string;
  ClientRequestToken?: string;
}
export interface StartCalculationExecutionResponse {
  CalculationExecutionId?: string;
  State?: CalculationExecutionState;
}
export interface StartQueryExecutionInput {
  QueryString: string | undefined;
  ClientRequestToken?: string;
  QueryExecutionContext?: QueryExecutionContext;
  ResultConfiguration?: ResultConfiguration;
  WorkGroup?: string;
  ExecutionParameters?: string[];
  ResultReuseConfiguration?: ResultReuseConfiguration;
}
export interface StartQueryExecutionOutput {
  QueryExecutionId?: string;
}
export declare class SessionAlreadyExistsException extends __BaseException {
  readonly name: "SessionAlreadyExistsException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<SessionAlreadyExistsException, __BaseException>
  );
}
export interface StartSessionRequest {
  Description?: string;
  WorkGroup: string | undefined;
  EngineConfiguration: EngineConfiguration | undefined;
  NotebookVersion?: string;
  SessionIdleTimeoutInMinutes?: number;
  ClientRequestToken?: string;
}
export interface StartSessionResponse {
  SessionId?: string;
  State?: SessionState;
}
export interface StopCalculationExecutionRequest {
  CalculationExecutionId: string | undefined;
}
export interface StopCalculationExecutionResponse {
  State?: CalculationExecutionState;
}
export interface StopQueryExecutionInput {
  QueryExecutionId?: string;
}
export interface StopQueryExecutionOutput {}
export interface TagResourceInput {
  ResourceARN: string | undefined;
  Tags: Tag[] | undefined;
}
export interface TagResourceOutput {}
export interface TerminateSessionRequest {
  SessionId: string | undefined;
}
export interface TerminateSessionResponse {
  State?: SessionState;
}
export interface UntagResourceInput {
  ResourceARN: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagResourceOutput {}
export interface UpdateCapacityReservationInput {
  TargetDpus: number | undefined;
  Name: string | undefined;
}
export interface UpdateCapacityReservationOutput {}
export interface UpdateDataCatalogInput {
  Name: string | undefined;
  Type: DataCatalogType | undefined;
  Description?: string;
  Parameters?: Record<string, string>;
}
export interface UpdateDataCatalogOutput {}
export interface UpdateNamedQueryInput {
  NamedQueryId: string | undefined;
  Name: string | undefined;
  Description?: string;
  QueryString: string | undefined;
}
export interface UpdateNamedQueryOutput {}
export interface UpdateNotebookInput {
  NotebookId: string | undefined;
  Payload: string | undefined;
  Type: NotebookType | undefined;
  SessionId?: string;
  ClientRequestToken?: string;
}
export interface UpdateNotebookOutput {}
export interface UpdateNotebookMetadataInput {
  NotebookId: string | undefined;
  ClientRequestToken?: string;
  Name: string | undefined;
}
export interface UpdateNotebookMetadataOutput {}
export interface UpdatePreparedStatementInput {
  StatementName: string | undefined;
  WorkGroup: string | undefined;
  QueryStatement: string | undefined;
  Description?: string;
}
export interface UpdatePreparedStatementOutput {}
export interface ResultConfigurationUpdates {
  OutputLocation?: string;
  RemoveOutputLocation?: boolean;
  EncryptionConfiguration?: EncryptionConfiguration;
  RemoveEncryptionConfiguration?: boolean;
  ExpectedBucketOwner?: string;
  RemoveExpectedBucketOwner?: boolean;
  AclConfiguration?: AclConfiguration;
  RemoveAclConfiguration?: boolean;
}
export interface WorkGroupConfigurationUpdates {
  EnforceWorkGroupConfiguration?: boolean;
  ResultConfigurationUpdates?: ResultConfigurationUpdates;
  PublishCloudWatchMetricsEnabled?: boolean;
  BytesScannedCutoffPerQuery?: number;
  RemoveBytesScannedCutoffPerQuery?: boolean;
  RequesterPaysEnabled?: boolean;
  EngineVersion?: EngineVersion;
  RemoveCustomerContentEncryptionConfiguration?: boolean;
  AdditionalConfiguration?: string;
  ExecutionRole?: string;
  CustomerContentEncryptionConfiguration?: CustomerContentEncryptionConfiguration;
  EnableMinimumEncryptionConfiguration?: boolean;
  QueryResultsS3AccessGrantsConfiguration?: QueryResultsS3AccessGrantsConfiguration;
}
export interface UpdateWorkGroupInput {
  WorkGroup: string | undefined;
  Description?: string;
  ConfigurationUpdates?: WorkGroupConfigurationUpdates;
  State?: WorkGroupState;
}
export interface UpdateWorkGroupOutput {}
export interface QueryStagePlanNode {
  Name?: string;
  Identifier?: string;
  Children?: QueryStagePlanNode[];
  RemoteSources?: string[];
}
export interface QueryStage {
  StageId?: number;
  State?: string;
  OutputBytes?: number;
  OutputRows?: number;
  InputBytes?: number;
  InputRows?: number;
  ExecutionTime?: number;
  QueryStagePlan?: QueryStagePlanNode;
  SubStages?: QueryStage[];
}
export interface QueryRuntimeStatistics {
  Timeline?: QueryRuntimeStatisticsTimeline;
  Rows?: QueryRuntimeStatisticsRows;
  OutputStage?: QueryStage;
}
export interface GetQueryRuntimeStatisticsOutput {
  QueryRuntimeStatistics?: QueryRuntimeStatistics;
}
