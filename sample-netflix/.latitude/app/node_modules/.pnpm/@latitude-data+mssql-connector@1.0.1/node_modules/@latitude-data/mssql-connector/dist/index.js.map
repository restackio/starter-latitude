{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import {\n  BaseConnector,\n  CompiledQuery,\n  ResolvedParam,\n} from '@latitude-data/base-connector'\nimport QueryResult, { DataType, Field } from '@latitude-data/query_result'\nimport sql from 'mssql'\n\nexport type ConnectionParams = {\n  user: string\n  password: string\n  database: string\n  server: string\n  pool?: {\n    max: number\n    min: number\n    idleTimeoutMillis: number\n  }\n  options?: {\n    encrypt: boolean\n    trustServerCertificate: boolean\n  }\n}\n\nexport class MssqlConnector extends BaseConnector {\n  private pool\n\n  constructor(rootPath: string, connectionParams: ConnectionParams) {\n    super(rootPath)\n\n    this.pool = new sql.ConnectionPool(connectionParams)\n  }\n\n  resolve(value: unknown, index: number): ResolvedParam {\n    return {\n      value,\n      resolvedAs: `@var${index + 1}`,\n    }\n  }\n\n  async runQuery(query: CompiledQuery): Promise<QueryResult> {\n    let fields: Field[] = []\n    const rows: unknown[][] = []\n    const conn = await this.pool.connect()\n\n    if (query.params.length > 0) {\n      const ps = new sql.PreparedStatement(conn)\n\n      for (const param of query.params) {\n        ps.input(\n          param.resolvedAs.replace('@', ''),\n          this.inferDataType(param.value),\n        )\n      }\n\n      return await new Promise((resolve, reject) => {\n        ps.prepare(query.sql, (err) => {\n          if (err) {\n            return reject(err)\n          }\n\n          const pp = this.buildQueryParams(query.params)\n          ps.stream = true\n          const req = ps.execute(pp, (err) => {\n            if (err) {\n              reject(err)\n            }\n          })\n          req.on('done', () => {\n            ps.unprepare((err) => {\n              if (err) {\n                return reject(err)\n              }\n\n              resolve(\n                new QueryResult({\n                  fields,\n                  rows,\n                  rowCount: rows.length,\n                }),\n              )\n            })\n          })\n\n          req.on('recordset', (columns) => {\n            fields = this.buildFields(columns)\n          })\n\n          req.on('error', (err: Error) => {\n            reject(err)\n          })\n\n          req.on('row', (row: unknown[]) => {\n            rows.push(row)\n          })\n        })\n      })\n    } else {\n      const request = new sql.Request(conn)\n      request.stream = true\n      request.query(query.sql)\n\n      return await new Promise((resolve, reject) => {\n        request.on('done', async () => {\n          resolve(\n            new QueryResult({\n              fields,\n              rows,\n              rowCount: rows.length,\n            }),\n          )\n        })\n\n        request.on('recordset', (columns) => {\n          fields = this.buildFields(columns)\n        })\n\n        request.on('error', (err) => {\n          reject(err)\n        })\n\n        request.on('row', (row) => {\n          rows.push(row)\n        })\n      })\n    }\n  }\n\n  private buildQueryParams(params: ResolvedParam[]) {\n    return params.reduce((acc, param) => {\n      return {\n        ...acc,\n        [param.resolvedAs.replace('@', '')]: param.value,\n      }\n    }, {})\n  }\n\n  private buildFields(columns: sql.IColumnMetadata) {\n    return Object.entries(columns).map(([name, column]) => {\n      return {\n        name,\n        type: this.convertDataType(column.type),\n      } as Field\n    })\n  }\n\n  private convertDataType(\n    type: sql.ISqlTypeFactory,\n    fallback = DataType.Unknown,\n  ) {\n    switch (type) {\n      case sql.Bit:\n        return DataType.Boolean\n      case sql.TinyInt:\n      case sql.SmallInt:\n      case sql.Int:\n      case sql.BigInt:\n        return DataType.Integer\n      case sql.Decimal:\n      case sql.Float:\n      case sql.Money:\n      case sql.Numeric:\n      case sql.SmallMoney:\n      case sql.Real:\n        return DataType.Float\n      case sql.Char:\n      case sql.NChar:\n      case sql.Text:\n      case sql.NText:\n      case sql.VarChar:\n      case sql.NVarChar:\n        return DataType.String\n      case sql.Time:\n      case sql.Date:\n      case sql.DateTime:\n      case sql.DateTime2:\n      case sql.DateTimeOffset:\n      case sql.SmallDateTime:\n        return DataType.Datetime\n      default:\n        return fallback\n    }\n  }\n\n  private inferDataType(value: unknown) {\n    // IMPORTANT: Order matters\n    if (typeof value === 'boolean') {\n      return sql.Bit\n    } else if (typeof value === 'number') {\n      if (Number.isInteger(value)) {\n        return sql.Int\n      } else {\n        return sql.Float\n      }\n    } else if (value instanceof Date) {\n      return sql.DateTime\n    } else if (!isNaN(Date.parse(value as string))) {\n      return sql.DateTime\n    } else {\n      return sql.VarChar\n    }\n  }\n}\n"],"names":[],"mappings":"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"}