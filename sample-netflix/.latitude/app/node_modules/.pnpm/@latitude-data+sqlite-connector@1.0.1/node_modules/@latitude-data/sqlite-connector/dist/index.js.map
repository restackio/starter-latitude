{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import {\n  BaseConnector,\n  CompiledQuery,\n  ConnectorError,\n  ResolvedParam,\n} from '@latitude-data/base-connector'\nimport QueryResult, { DataType, Field } from '@latitude-data/query_result'\nimport pkg from 'sqlite3'\n\nconst { Database, OPEN_READONLY, OPEN_READWRITE } = pkg\n\nexport type ConnectionParams = {\n  url?: string\n}\n\nexport class SqliteConnector extends BaseConnector {\n  private url: string\n\n  constructor(rootPath: string, connectionParams: ConnectionParams) {\n    super(rootPath)\n\n    this.url = connectionParams.url || ':memory:'\n  }\n\n  resolve(value: unknown): ResolvedParam {\n    return {\n      value,\n      resolvedAs: '?',\n    }\n  }\n\n  async runQuery(query: CompiledQuery): Promise<QueryResult> {\n    try {\n      const client = new Database(\n        this.url,\n        this.url === ':memory:' ? OPEN_READWRITE : OPEN_READONLY,\n        (err) => {\n          if (err) {\n            throw new ConnectorError(err.message)\n          }\n        },\n      )\n\n      const results = await new Promise<unknown[]>((resolve, reject) => {\n        client.serialize(() => {\n          client.all(\n            query.sql,\n            this.buildQueryParams(query.params),\n            (err, results) => {\n              if (err) {\n                reject(err)\n              }\n\n              client.close()\n              resolve(results)\n            },\n          )\n        })\n      })\n\n      const rows = results.map((row) =>\n        Object.values(row as Record<string, unknown>),\n      )\n      const rowCount = results.length\n      const firstRow = results[0]\n      const fields = firstRow\n        ? this.inferDataTypes(firstRow as Record<string, unknown>)\n        : []\n\n      return new QueryResult({ fields, rows, rowCount })\n    } catch (error) {\n      throw new ConnectorError((error as Error).message)\n    }\n  }\n\n  private buildQueryParams(params: ResolvedParam[]) {\n    return params.map((param) => param.value)\n  }\n\n  private inferDataTypes(row: Record<string, unknown>) {\n    const fields: Field[] = []\n\n    for (const [key, value] of Object.entries(row)) {\n      const type = typeof value\n\n      // IMPORTANT: Order matters\n      if (type === 'number') {\n        if (Number.isInteger(value)) {\n          fields.push({ name: key, type: DataType.Integer })\n        } else {\n          fields.push({ name: key, type: DataType.Float })\n        }\n      } else if (type === 'boolean') {\n        fields.push({ name: key, type: DataType.Boolean })\n      } else if (!isNaN(Date.parse(value as string))) {\n        fields.push({ name: key, type: DataType.Datetime })\n      } else if (type === 'string') {\n        fields.push({ name: key, type: DataType.String })\n      } else {\n        fields.push({ name: key, type: DataType.Unknown })\n      }\n    }\n\n    return fields\n  }\n}\n"],"names":[],"mappings":"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"}