{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import {\n  BaseConnector,\n  CompiledQuery,\n  ConnectionError,\n  ResolvedParam,\n} from '@latitude-data/base-connector'\nimport QueryResult, { DataType, Field } from '@latitude-data/query_result'\nimport { DBSQLClient } from '@databricks/sql'\nimport { ConnectionOptions } from '@databricks/sql/dist/contracts/IDBSQLClient'\nimport { TTypeDesc } from '@databricks/sql/thrift/TCLIService_types'\n\nexport type ConnectionParams = {\n  host: string\n  port?: number\n  path: string\n  clientId?: string\n\n  token?: string\n\n  oauthClientId?: string\n  oauthClientSecret?: string\n}\n\nexport class DatabricksConnector extends BaseConnector {\n  private client: DBSQLClient\n  private connectionOptions: ConnectionOptions\n  private isConnected: boolean = false\n\n  constructor(rootPath: string, connectionParams: ConnectionParams) {\n    super(rootPath)\n    this.client = new DBSQLClient()\n    const { host, port, path } = connectionParams\n    const connection = { host, port, path }\n\n    if (connectionParams.token) {\n      this.connectionOptions = {\n        ...connection,\n        authType: 'access-token',\n        token: connectionParams.token,\n      }\n    } else if (\n      connectionParams.oauthClientId &&\n      connectionParams.oauthClientSecret\n    ) {\n      this.connectionOptions = {\n        ...connection,\n        authType: 'databricks-oauth',\n        oauthClientId: connectionParams.oauthClientId,\n        oauthClientSecret: connectionParams.oauthClientSecret,\n      }\n    } else {\n      throw new ConnectionError(\n        'Invalid connection parameters. Provide either a token or OAuth client ID and secret.',\n      )\n    }\n  }\n\n  async connect(): Promise<void> {\n    this.client.connect(this.connectionOptions)\n    this.isConnected = true\n  }\n\n  async disconnect(): Promise<void> {\n    this.client.close()\n    this.isConnected = false\n  }\n\n  resolve(value: unknown, index: number): ResolvedParam {\n    /**\n     * Databricks parameterisation is done using {{ var_name }} for regular variables\n     * and '{{ var_name }}' for date and timestamp values.\n     * https://docs.databricks.com/en/sql/user/queries/query-parameters.html#date-and-time\n     */\n    const isDate =\n      value instanceof Date ||\n      (typeof value === 'string' && !isNaN(Date.parse(value)))\n    const resolvedValue = `{{ var_${index} }}`\n    return {\n      value,\n      resolvedAs: isDate ? `'${resolvedValue}'` : resolvedValue,\n    }\n  }\n\n  async runQuery(request: CompiledQuery): Promise<QueryResult> {\n    if (!this.isConnected) await this.connect()\n\n    const session = await this.client.openSession()\n    const queryOperation = await session.executeStatement(request.sql, {\n      namedParameters: request.params.reduce((acc, param, index) => {\n        return { ...acc, [`var_${index}`]: param.value }\n      }),\n    })\n    const result = await queryOperation.fetchAll()\n    const schema = await queryOperation.getSchema()\n    await queryOperation.close()\n    await session.close()\n\n    const fields: Field[] = schema!.columns.map((column) => {\n      return {\n        name: column.columnName,\n        type: this.convertDataType(column.typeDesc),\n      }\n    })\n    const rows: unknown[][] = result.map((row) => Object.values(row))\n\n    return new QueryResult({\n      rowCount: rows.length,\n      fields,\n      rows,\n    })\n  }\n\n  private convertDataType(\n    dataType: TTypeDesc,\n    fallbackType = DataType.Unknown,\n  ): DataType {\n    switch (dataType.types[0]?.primitiveEntry?.type) {\n      case 0: // BOOLEAN_TYPE\n      case 1: // TINYINT_TYPE\n        return DataType.Boolean\n      case 2: // SMALLINT_TYPE\n      case 3: // INT_TYPE\n      case 4: // BIGINT_TYPE\n        return DataType.Integer\n      case 5: // FLOAT_TYPE\n      case 6: // DOUBLE_TYPE\n      case 15: // DECIMAL_TYPE\n        return DataType.Float\n      case 7: // STRING_TYPE\n      case 18: // VARCHAR_TYPE\n      case 19: // CHAR_TYPE\n        return DataType.String\n      case 8: // TIMESTAMP_TYPE\n      case 17: // DATE_TYPE\n        return DataType.Datetime\n      default:\n        return fallbackType\n    }\n  }\n}\n"],"names":[],"mappings":"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"}