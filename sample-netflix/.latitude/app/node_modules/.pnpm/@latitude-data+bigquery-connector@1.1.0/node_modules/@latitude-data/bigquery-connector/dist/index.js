import { BigQuery } from '@google-cloud/bigquery';
import { BaseConnector, ConnectorError, ConnectionError } from '@latitude-data/base-connector';
import QueryResult, { DataType } from '@latitude-data/query_result';
import { OAuth2Client } from 'google-auth-library';

class BigQueryConnector extends BaseConnector {
    params;
    constructor(rootPath, connectionParams) {
        super(rootPath);
        this.params = connectionParams;
    }
    resolve(value, index) {
        return {
            value,
            resolvedAs: `@var${index + 1}`,
        };
    }
    async runQuery(query) {
        const client = this.createClient();
        try {
            const [job] = await client.createQueryJob({
                query: query.sql,
                params: this.buildQueryParams(query.params),
            });
            // Wait for the query to finish
            const [rows, , metadata] = await job.getQueryResults({
                autoPaginate: false,
            });
            const rowCount = Number(metadata?.totalRows) || 0;
            const fields = metadata?.schema?.fields?.map((field) => ({
                name: field.name,
                type: this.convertDataType(field.type),
            })) || [];
            return new QueryResult({
                rowCount,
                fields,
                rows: this.transformRows({ rows, fields }),
            });
        }
        catch (error) {
            throw new ConnectorError(error.message);
        }
    }
    buildCredentials() {
        const credentials = { projectId: this.params.projectId };
        if (this.params.credentials) {
            return {
                ...credentials,
                credentials: {
                    client_email: this.params.credentials.client_email,
                    private_key: this.params.credentials.private_key
                        .replace(/\\n/g, '\n')
                        .trim(),
                },
            };
        }
        else if (this.params.token) {
            const { token } = this.params;
            const oauth = new OAuth2Client();
            oauth.setCredentials({ access_token: token });
            return {
                ...credentials,
                authClient: oauth,
            };
        }
        else {
            return credentials;
        }
    }
    buildQueryParams(params) {
        return params.reduce((acc, param, index) => {
            acc[`var${index + 1}`] = param.value;
            return acc;
        }, {});
    }
    createClient() {
        try {
            return new BigQuery(this.buildCredentials());
        }
        catch (error) {
            const errorObj = error;
            throw new ConnectionError(errorObj.message, errorObj);
        }
    }
    transformRows({ rows, fields, }) {
        return rows.map((row) => {
            return Object.entries(row).map(([key, value]) => {
                const field = fields.find((field) => field.name === key);
                if (!field)
                    return value;
                if (field.type === DataType.Datetime) {
                    return value['value'];
                }
                else {
                    return value;
                }
            });
        });
    }
    convertDataType(dataTypeID, fallbackType = DataType.Unknown) {
        switch (dataTypeID) {
            case 'BOOL':
            case 'BOOLEAN':
                return DataType.Boolean;
            case 'INT64':
            case 'INT':
            case 'SMALLINT':
            case 'INTEGER':
            case 'BIGINT':
            case 'TINYINT':
            case 'BYTEINT':
            case 'NUMERIC':
            case 'BIGNUMERIC':
                return DataType.Integer;
            case 'BIGDECIMAL':
            case 'DECIMAL':
            case 'FLOAT64':
            case 'FLOAT':
                return DataType.Float;
            case 'TIME':
            case 'STRING':
            case 'BYTES':
            case 'GEOGRAPHY':
            case 'INTERVAL':
                return DataType.String;
            case 'TIMESTAMP':
            case 'DATE':
            case 'DATETIME':
                return DataType.Datetime;
            case 'STRUCT':
            case 'ARRAY':
            case 'JSON':
            default:
                return fallbackType;
        }
    }
}

export { BigQueryConnector };
//# sourceMappingURL=index.js.map
