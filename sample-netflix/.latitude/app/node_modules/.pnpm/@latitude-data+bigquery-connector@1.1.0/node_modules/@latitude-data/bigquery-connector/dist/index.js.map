{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import { BigQuery, BigQueryOptions } from '@google-cloud/bigquery'\nimport {\n  BaseConnector,\n  ConnectionError,\n  CompiledQuery,\n  ResolvedParam,\n  ConnectorError,\n} from '@latitude-data/base-connector'\nimport QueryResult, { DataType, Field } from '@latitude-data/query_result'\nimport { OAuth2Client } from 'google-auth-library'\nimport { JSONClient } from 'google-auth-library/build/src/auth/googleauth'\n\ntype ConnectionParams = {\n  credentials?: {\n    client_email: string\n    private_key: string\n  }\n  projectId: string\n  token?: string\n}\n\nexport class BigQueryConnector extends BaseConnector {\n  private params: ConnectionParams\n\n  constructor(rootPath: string, connectionParams: ConnectionParams) {\n    super(rootPath)\n\n    this.params = connectionParams\n  }\n\n  resolve(value: unknown, index: number): ResolvedParam {\n    return {\n      value,\n      resolvedAs: `@var${index + 1}`,\n    }\n  }\n\n  async runQuery(query: CompiledQuery): Promise<QueryResult> {\n    const client = this.createClient()\n\n    try {\n      const [job] = await client.createQueryJob({\n        query: query.sql,\n        params: this.buildQueryParams(query.params),\n      })\n\n      // Wait for the query to finish\n      const [rows, , metadata] = await job.getQueryResults({\n        autoPaginate: false,\n      })\n      const rowCount = Number(metadata?.totalRows) || 0\n      const fields =\n        metadata?.schema?.fields?.map(\n          (field) =>\n            ({\n              name: field.name,\n              type: this.convertDataType(field.type),\n            }) as Field,\n        ) || []\n\n      return new QueryResult({\n        rowCount,\n        fields,\n        rows: this.transformRows({ rows, fields }),\n      })\n    } catch (error) {\n      throw new ConnectorError((error as Error).message)\n    }\n  }\n\n  private buildCredentials(): BigQueryOptions {\n    const credentials = { projectId: this.params.projectId }\n\n    if (this.params.credentials) {\n      return {\n        ...credentials,\n        credentials: {\n          client_email: this.params.credentials.client_email,\n          private_key: this.params.credentials.private_key\n            .replace(/\\\\n/g, '\\n')\n            .trim(),\n        },\n      }\n    } else if (this.params.token) {\n      const { token } = this.params\n      const oauth = new OAuth2Client()\n      oauth.setCredentials({ access_token: token })\n\n      return {\n        ...credentials,\n        authClient: oauth as JSONClient,\n      }\n    } else {\n      return credentials\n    }\n  }\n\n  private buildQueryParams(params: ResolvedParam[]): Record<string, unknown> {\n    return params.reduce(\n      (acc, param, index) => {\n        acc[`var${index + 1}`] = param.value\n        return acc\n      },\n      {} as Record<string, unknown>,\n    )\n  }\n\n  private createClient() {\n    try {\n      return new BigQuery(this.buildCredentials())\n    } catch (error: unknown) {\n      const errorObj = error as Error\n      throw new ConnectionError(errorObj.message, errorObj)\n    }\n  }\n\n  private transformRows({\n    rows,\n    fields,\n  }: {\n    rows: Record<string, unknown>[]\n    fields: Field[]\n  }) {\n    return rows.map((row) => {\n      return Object.entries(row).map(([key, value]) => {\n        const field = fields.find((field) => field.name === key)\n        if (!field) return value\n\n        if (field.type === DataType.Datetime) {\n          return (value as { value: unknown })['value']\n        } else {\n          return value\n        }\n      })\n    })\n  }\n\n  private convertDataType(\n    dataTypeID: string | undefined,\n    fallbackType = DataType.Unknown,\n  ): DataType {\n    switch (dataTypeID) {\n      case 'BOOL':\n      case 'BOOLEAN':\n        return DataType.Boolean\n      case 'INT64':\n      case 'INT':\n      case 'SMALLINT':\n      case 'INTEGER':\n      case 'BIGINT':\n      case 'TINYINT':\n      case 'BYTEINT':\n      case 'NUMERIC':\n      case 'BIGNUMERIC':\n        return DataType.Integer\n      case 'BIGDECIMAL':\n      case 'DECIMAL':\n      case 'FLOAT64':\n      case 'FLOAT':\n        return DataType.Float\n      case 'TIME':\n      case 'STRING':\n      case 'BYTES':\n      case 'GEOGRAPHY':\n      case 'INTERVAL':\n        return DataType.String\n      case 'TIMESTAMP':\n      case 'DATE':\n      case 'DATETIME':\n        return DataType.Datetime\n      case 'STRUCT':\n      case 'ARRAY':\n      case 'JSON':\n      default:\n        return fallbackType\n    }\n  }\n}\n"],"names":[],"mappings":"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"}