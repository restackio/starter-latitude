import { type CompileError } from '@latitude-data/sql-compiler';
import type QueryResult from '@latitude-data/query_result';
import { type QueryRequest, type ResolvedParam, type CompiledQuery } from './types';
export declare abstract class BaseConnector {
    private rootPath;
    constructor(rootPath: string);
    /**
     * While compiling the query, the connector will call this method to resolve the
     * parameterised string for a variable. The index is the position of this variable
     * in the array of ResolvedParams that will be passed to the runQuery method.
     */
    protected abstract resolve(value: unknown, index: number): ResolvedParam;
    protected abstract runQuery(request: CompiledQuery): Promise<QueryResult>;
    protected connect(): Promise<void>;
    protected disconnect(): Promise<void>;
    run(request: QueryRequest): Promise<QueryResult>;
    runCompiled(request: CompiledQuery): Promise<QueryResult>;
    compileQuery(request: QueryRequest): Promise<{
        compiledQuery: string;
        resolvedParams: ResolvedParam[];
    }>;
    private _query;
    private _compileQuery;
    private fullQueryPath;
    private readQuery;
    private buildSupportedMethods;
}
export declare const CAST_METHODS: {
    [type: string]: (value: any) => unknown;
};
export * from './types';
export { CompileError };
//# sourceMappingURL=index.d.ts.map